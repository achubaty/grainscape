[{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"Minimum Planar Graph (MPG) spatial representation mathematical graph network useful modelling dense two-dimensional landscape networks. can efficiently approximate pairwise connections graph nodes, can assist visualization analysis set patches connected. MPG also useful property proximity, size shape patches network combined pattern resistance presented landscape collectively influence paths among patches end-points links. sense MPG can said spatially-explicit, therefore property entire landscape analysis (alternatively property digital resistance map used represent landscape). Minimum Planar Graph (MPG) achieves spatially-explicit property finding Voronoi polygons describe regions proximity resistance units around focal patches. algorithm used find Voronoi boundaries approximate least cost-paths patches end-points described . grainscape, boundaries Voronoi polygons found using spreading marching algorithm. done beginning perimeter cell patch spreading adjacent cells part patch visited yet algorithm. cells given patch ID mark Voronoi territory. Voronoi boundary found cell visited twice two different Voronoi territories IDs originating different patches. Using marching algorithm find Voronoi boundaries makes possible implement linking algorithm can run parallel marching algorithm. cell spread (let’s call child cell) creates link connection child cell cell spread , call parent cell. Finding least-cost path way possible algorithm stores child cells (eventually become parent cells) queuing table sorts cells certain order. child cells sorted increasing Euclidean distance child cell origin cell, perimeter cell connection originally spawned . link path patches created first Voronoi boundary two patches. MPG algorithm following general steps. represented detail flow chart Figure 1. Create Active Cells. Check Active Cells ready spread. Spread 4 adjacent cells Active Cells ready spread. cells recently spread become new Active Cells. Repeat. Overview MPG algorithm. linking algorithm embedded within spreading functions MPG algorithm. Active Cell spreads link map creates connection parent Active Cell new (child) Active Cell. Linking assisted queue finding least-cost paths.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"technical-reference-to-the-mpg-engine-written-in-c","dir":"Articles","previous_headings":"","what":"Technical reference to the MPG engine written in C++","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"following intended provide overview C++ engine provided package implements MPG algorithm. may useful wish implement MPG extraction programming languages. Reading interpretation section required use grainscape R. interface code abstracted R functions using Rcpp package.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"terminology","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++","what":"Terminology","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"Cell: box element map. Active Cell: type cell currently evaluated. refers child cell mentioned . Time: index iteration. Object: instance certain data type, class, data structure (.e., Cell c, c object type Cell).","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"data-structures","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++","what":"Data Structures","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"Cell: stores position (row column) ID. ActiveCell: inherits properties Cell properties distance, originCell, parentCell, resistance, time (iterations). type cell used keep track cells currently evaluated. LinkCell: inherits properties Cell properties cost, distance, fromCell, originCell. type cell used create LinkMap. Schematic representation Cell type data structures. ActiveCellHolder: type container stores vector ActiveCells order. ActiveCellQueue: contains ActiveCellHolder. main purpose properly store ActiveCellHolder vector order, increasing Euclidean distance. InputData: contains data needed engine operate. user engine create instance initialize properties giving address object engine’s constructor. Link: stores links (directly indirectly) patches. Links given negative ID distinguish patch IDs. OutputData: similar InputData acts container data calculated engine gives data user. Patch: patch cluster habitats found resistance map, given value habitat. Schematic representation additional data structures.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"type-definitions","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++","what":"Type Definitions","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"lcCol: vector LinkCells. LinkMap: vector lcCols, turn creates Map. type stores connections cells. flCol: vector floating point values. flMap: vector flCol, turn creates Map contains floating point values element cell. Schematic representation type definitions.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"the-engine-class","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++","what":"The Engine Class","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"main calculator program. creates minimum planar graph (MPG) using MPG algorithm, finds least cost links paths, finds patches clusters. Schematic representation Engine Class","code":""},{"path":[]},{"path":[]},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"public-functions","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++ > The Engine Class > Methods/Functions","what":"Public Functions","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"functions visible user.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"linking-functions","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++ > The Engine Class > Methods/Functions","what":"Linking Functions","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"functions create links cells finds least cost (direct indirect) paths patches.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"patch-finding-functions","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++ > The Engine Class > Methods/Functions","what":"Patch Finding Functions","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"functions responsible finding patches clusters resistance map, given value habitat.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"common-functions","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++ > The Engine Class > Methods/Functions","what":"Common Functions","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"Common functions used almost functions engine.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"static-functions","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++ > The Engine Class > Methods/Functions","what":"Static Functions","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"Static functions functions can used without declaring object class.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/MPG_algorithm.html","id":"how-to-use-the-engine","dir":"Articles","previous_headings":"Technical reference to the MPG engine written in C++","what":"How to Use the Engine","title":"Calculating the minimum planar graph and generating Voronoi tessellations","text":"Create InputData OutputData objects. Initialize InputData object’s fields. Keep mind vectors InputData Output data structures type float. Create array Char length MAX_CHAR_SIZE larger value. Create Engine object give address InputData OutputData objects, Char array size array arguments. Call initialization function Engine object. initialization successful, call start function Engine object. initialization successful, array char contain reason initialization failure. engine done calculating, extract fields needed OutputData object. snippet C++ code shown next page example. Note current Engine two lines code meant interfacing R. order make Engine run programming scripting language, remove two lines. One include statement Rcpp, top source code, inside start function, first line inside loop. two lines convenient R users want interrupt stop MPG algorithm safely, without crashing console possibly losing data.","code":"vector<float> EngineInterface(vector<float> resistance, vector<float> patches,                               int nrow, int ncol) {     //InputData and OutputData objects     InputData inObj;     OutputData outObj;       //Initialize InputData object     inObj.cost_vec = resistance;     inObj.nrow = nrow;     inObj.ncol = ncol;     inObj.patch_vec = patches;      //Array of chars with a size of MAX_CHAR_SIZE     char error[MAX_CHAR_SIZE];      //Engine object while passing in the InputData and OutputData objects'     // address and the array of chars     Engine engineObj(&inObj, &outObj, error, MAX_CHAR_SIZE);      //Initialize the engineObj;     //If it fails output the reason why and exit the function     if (engineObj.initialize() == false)     {         cout << error << endl;         return outObj.voronoi_map;     }      //start the calculation     engineObj.start();      //extract the data needed, in this case the voronoi_map     return outObj.voronoi_map; }"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"visual-table-of-contents","dir":"Articles","previous_headings":"","what":"Visual table of contents","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Landscape network modelling grainscape. Numerals refer figures. Scaling landscape networks grainscape. Numerals refer figures.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Modelling, visualization and analysis with the `grainscape` package","text":"grainscape package enables range analyses within R applications across disciplines ecology, conservation biology geography. example, networks extracted grainscape can used model habitat connectivity evaluate protected area network resilience. networks can modelled, visualized analyzed multiple spatial scales. general contribution ability extract Voronoi tessellations continuous resistance surface. applications spatial analysis, example model service areas travel times cost movement vary continuously across space. inspiration grainscape package analysis landscape connectivity. approach comes patch-based landscape graphs tradition (Urban Keitt 2001; Fall et al. 2007; Galpern, Manseau, Fall 2011) mathematical graph network used represent relationships among habitat patches. grainscape equally protected areas connectivity terrestrial ecological processes interest, ranging behaviour plant animal dispersal. two types models produced grainscape. first, minimum planar graph (Fall et al. 2007) efficient approximation potential connectivity among set focal two dimensional nodes. landscape connectivity modelling nodes might habitat patches protected areas. second model type grain connectivity, based minimum planar graph, extends way may useful scaling (Galpern, Manseau, Wilson 2012; Galpern Manseau 2013a, 2013b). , using landscape connectivity example, grains can used sensitivity analyses protected area connectivity, model highly mobile terrestrial animals, ungulates carnivores, habitat patch may discrete definable feature rather defined probabilistically. model achieves using complement minimum planar graph, Voronoi tessellation map, modelling relationships among polygons Voronoi tessellation rather discrete patches. approach shown improve ability model movements highly-mobile organisms (Galpern, Manseau, Wilson 2012). example, grains connectivity provides continuous coverage entire landscape surface way typical patch-based network . also permits examination connectivity multiple scales, can accommodate uncertainty species may perceive landscape features (Galpern Manseau 2013a, 2013b). grainscape package provides functions extract minimum planar graph create two types grains connectivity: patch lattice forms. reference begins introducing two model types, concludes demonstrating variety grainscape models, visualizations, analyses using consistent visual style. Code commentary included throughout. analyses reproducible data distributed package.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"modelling-with-grainscape","dir":"Articles","previous_headings":"","what":"Modelling with grainscape","title":"Modelling, visualization and analysis with the `grainscape` package","text":"section demonstrate prepare rasters modelling grainscape. Data provided package used examples. input grainscape resistance surface, optionally second raster describing focal regions raster serve nodes network. resistance surface may represent resistance flow ecological process interest, nodes, focal regions process origin. typical application model connectivity landscapes dispersal terrestrial animals. , resistance surface models costs movement, nodes habitat animals may disperse. Many applications nodes resistance surfaces equally valid represent ecological non-ecological processes. Inputs grainscape typically raster images. Rasters may represent geographical region, ideally projected coordinate system. raster must contain cells value >= 1, values real integers. data missing, cells must value == NA (e.g, commonly boundary cells irregularly shaped region interest). following key packages required complete analyses grainscape. igraph package provides network analytical functions, raster provides data structure raster analytical functions upon grainscape depends manage data. Finally model analytical products compatible visualizing using popular ggplot2 idiom.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"model-1-the-minimum-planar-graph","dir":"Articles","previous_headings":"Modelling with grainscape","what":"Model 1: The minimum planar graph","title":"Modelling, visualization and analysis with the `grainscape` package","text":"minimum planar graph (hereafter MPG) spatial representation graph network provides efficient approximation possible pairwise connections graph nodes (Fall et al. 2007). graph-based landscape connectivity analyses, graph nodes typically patches habitat demonstrably important species question (Fall et al. 2007). following example continue habitat connectivity modelling objective clarity, emphasize task methods can applied. MPG representing habitat connectivity links model possibility organism movement dispersal spatially-adjacent habitat patches. cases spatially-adjacent patches may linked, shortest connection can made third patch. practice, property means MPG can used make simple easily visualized picture set habitat patches connected. alternative, complete graph, can quickly become challenging interpret may contain dense set graph links making pattern difficult discern. second advantage MPG much reduced set graph links; can valuable computational efficiency important, essential number habitat patches modelled numbers thousands. However, types connectivity analyses MPG approximation complete graph appropriate. example, assessing community structure within landscape patch network (.e., finding sets patches densely connected) possible redundant connections removed intentionally. Equally, MPG poor choice prioritizing influence patch connectivity, objective number landscape graph studies (e.g., Pascual-Hortal Saura 2006). Please see Galpern, Manseau, Fall (2011) discussion limitations MPG.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-1-preparing-the-resistance-surface","dir":"Articles","previous_headings":"Modelling with grainscape > Model 1: The minimum planar graph","what":"Step 1: Preparing the resistance surface","title":"Modelling, visualization and analysis with the `grainscape` package","text":"MPG typically constructed using shortest path links perimeters two dimensional node patches. habitat connectivity terms, implies landscape structure “matrix” patches influencing movement, organism question average minimizing costs moving matrix (assumption possibly appropriate terrestrial animals, terrestrial animal-dispersed plants). Equally, MPGs can constructed using Euclidean links, influence matrix movement effect spatial separation (.e., distance presents neighbouring habitat). , illustrate just case links shortest paths resistance surface. Euclidean links can produced passing uniform cost surface (constant raster), raster describing patches. example given later document. begin loading landscape raster distributed package. Note raster format readable using raster package can used . .asc format rasters distributed package ESRI ArcASCII format. , convenience, use R turn raster resistance surface. example assume feature class 1 (.e., cells value == 1) patches. set resistance value also equal 1 (.e., additional resistance movement distance alone). river, feature class 2, assigned highest resistance 10. features assigned values . parameterization resistance surfaces landscape connectivity modelling big topic (Zeller, McGarigal, Whiteley 2012). matrix isBecomes describes transformation feature class resistance surface. result shown . Input raster resistance surface create minimum planar graph (MPG). Features value 1 (red) patches network. river (light blue) highest resistance example.","code":"patchy <- raster(system.file(\"extdata/patchy.asc\", package = \"grainscape\")) ## Create an is-becomes matrix for reclassification isBecomes <- cbind(c(1, 2, 3, 4, 5), c(1, 10, 8, 3, 6)) patchyCost <- reclassify(patchy, rcl = isBecomes) patchyCost_df <- ggGS(patchyCost) patchyCost_df$value <- as.factor(patchyCost_df$value)  ## Plot this raster using ggplot2 functionality ## and the default grainscape theme ggplot() +   geom_raster(     data = patchyCost_df,     aes(x = x, y = y, fill = value)   ) +   scale_fill_brewer(type = \"div\", palette = \"Paired\", guide = \"legend\") +   guides(fill = guide_legend(title = \"Resistance\")) +   theme_grainscape() +   theme(legend.position = \"right\")"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-2-extracting-the-mpg","dir":"Articles","previous_headings":"Modelling with grainscape > Model 1: The minimum planar graph","what":"Step 2: Extracting the MPG","title":"Modelling, visualization and analysis with the `grainscape` package","text":"resistance surface hand next step create MPG. Basic use function, MPG() shown . simplicity assume areas resistance value equal 1 raster patches. convenient short cut patches part raster resistance equal geographic distance. However, many applications focal patches subset areas, represent areas multiple resistance values. can accommodated passing patch raster patch= parameter, created using method. Equally patches certain size filtered passing patch raster patchfilter() first.","code":"patchyMPG <- MPG(patchyCost, patch = (patchyCost == 1))"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-3-quick-visualization-of-the-mpg","dir":"Articles","previous_headings":"Modelling with grainscape > Model 1: The minimum planar graph","what":"Step 3: Quick visualization of the MPG","title":"Modelling, visualization and analysis with the `grainscape` package","text":"quick way visualize MPG provided plot method grainscape. appears . quick visualization minimum planar graph (MPG). Grey areas patches (nodes) graph, green lines links showing shortest paths perimeters patches resistance surface. depth discussion MPG generated can found elsewhere (Fall et al. 2007).","code":"plot(patchyMPG, quick = \"mpgPlot\", theme = FALSE)"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-4-reporting-on-the-mpg","dir":"Articles","previous_headings":"Modelling with grainscape > Model 1: The minimum planar graph","what":"Step 4: Reporting on the MPG","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Following extraction, MPG available igraph object (see patchyMPG@mpg) can analyzed using functions package. quick way report structure graph tabular format provided function graphdf(): output shows structure nodes (vertices) attributes list element $v well structure graph form link list (.e., pairs nodes e1 e2 connected) associated link (edge) attributes list element $e. Note first three lines reproduced . Please see manual interpretation attributes.","code":"## Extract tabular node information using the graphdf() function nodeTable <- graphdf(patchyMPG)[[1]]$v  ## Render table using the kable function, ## retaining the first three rows kable(nodeTable[1:3, ], digits = 0, row.names = FALSE) ## Extract tabular link information using the graphdf() function linkTable <- graphdf(patchyMPG)[[1]]$e  ## Render table using the kable function, ## retaining the first three rows kable(linkTable[1:3, ], digits = 0, row.names = FALSE)"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-5-thresholding-the-mpg","dir":"Articles","previous_headings":"Modelling with grainscape > Model 1: The minimum planar graph","what":"Step 5: Thresholding the MPG","title":"Modelling, visualization and analysis with the `grainscape` package","text":"frequent step analysis network threshold series clusters components representing connected areas (Urban Keitt 2001; Galpern, Manseau, Fall 2011; Galpern, Manseau, Wilson 2012). sometimes called scalar analysis (Brooks 2003). function threshold() provides way conduct scalar analysis multiple scales. ask 5 thresholds, function finds five approximately evenly-spaced threshold values link length. number components (‘nComponents’) minimum planar graph five automatically-selected link thresholds (’maxLink). $summary analysis can plotted explore scales aggregation landscape. shows scalar analysis landscape 100 thresholds, response variables number components sub-graphs created thresholding. scalar analysis 100 thresholds MPG . landscape single component higher link thresholds patches completely connected. example, organism able disperse 250 resistance units experience landscape six connected regions. independent variables describing components (e.g., area patches) , course, calculated processing thresholded graphs scalarAnalysis$th attributes using igraph function components().","code":"scalarAnalysis <- threshold(patchyMPG, nThresh = 5)  ## Use kable to render this as a table kable(scalarAnalysis$summary,   caption = paste(     \"The number of components ('nComponents') in the\",     \"minimum planar graph at five automatically-selected\",     \"link thresholds ('maxLink).\"   ) ) scalarAnalysis <- threshold(patchyMPG, nThresh = 100) ggplot(scalarAnalysis$summary, aes(x = maxLink, y = nComponents)) +   geom_line(colour = \"forestgreen\") +   xlab(\"Link Threshold (resistance units)\") +   ylab(\"Number of components\") +   scale_x_continuous(breaks = seq(0, 1000, by = 100)) +   scale_y_continuous(breaks = 1:20) +   theme_light() +   theme(axis.title = element_text())"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-6-visualizing-a-thresholded-graph","dir":"Articles","previous_headings":"Modelling with grainscape > Model 1: The minimum planar graph","what":"Step 6: Visualizing a thresholded graph","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Consider organism able disperse maximum 250 resistance units. According organism experience landscape 6 connected regions. visualized . thresholded MPG depicted link length 250 resistance units. organism can disperse maximum 250 resistance units experience landscape 6 connected regions depicted spatial configuration. Note plotting customized emphasize patches connected. done plotting links less threshold length centroids patches","code":"ggplot() +   geom_raster(     data = ggGS(patchyMPG, \"patchId\"),     aes(x = x, y = y, fill = value > 0)   ) +   scale_fill_manual(values = \"grey\") +   geom_segment(     data = ggGS(patchyMPG, \"links\"),     aes(       x = x1, y = y1, xend = x2, yend = y2,       colour = lcpPerimWeight >= 250     )   ) +   scale_colour_manual(values = c(\"forestgreen\", NA)) +   geom_point(     data = ggGS(patchyMPG, \"nodes\"), aes(x = x, y = y),     colour = \"darkgreen\"   )"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-7-next-steps","dir":"Articles","previous_headings":"Modelling with grainscape > Model 1: The minimum planar graph","what":"Step 7: Next steps","title":"Modelling, visualization and analysis with the `grainscape` package","text":"MPG hand, several additional types analyses possible. Grains connectivity (GOC), subject next section, example using MPG complement Voronoi tessellation. programming analyses R based MPG helpful observe patchyMPG@patchId patchyMPG@lcpLinkId rasters contain numerical IDs patches (nodes) links respectively. also contained attributes igraph object patchyMPG@mpg. Using three data objects together gives flexibility visualize graph analysis. Additional example visualizations analyses contained later document.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"model-2-patch-grains-of-connectivity","dir":"Articles","previous_headings":"Modelling with grainscape","what":"Model 2: Patch grains of connectivity","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Grains connectivity (hereafter GOC) initially developed three papers (Galpern, Manseau, Wilson 2012; Galpern Manseau 2013b, 2013a). Please refer papers much detail method. summary, grains connectivity describes tessellation functionally-connected regions map. example present context modelling landscape connectivity highly-mobile terrestrial organisms obligate patch occupants.","code":""},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-1-begin-with-a-mpg","dir":"Articles","previous_headings":"Modelling with grainscape > Model 2: Patch grains of connectivity","what":"Step 1: Begin with a MPG","title":"Modelling, visualization and analysis with the `grainscape` package","text":", repeat steps patchy resistance surface explored MPG examples. variations imaginable MPG modelling can provide valid basis build GOC.","code":"## Load the patchy raster distributed with grainscape patchy <- raster(system.file(\"extdata/patchy.asc\", package = \"grainscape\"))  ## Create an is-becomes matrix for reclassification isBecomes <- cbind(c(1, 2, 3, 4, 5), c(1, 10, 8, 3, 6)) patchyCost <- reclassify(patchy, rcl = isBecomes)  ## Create the MPG model using cells = 1 as patches patchyMPG <- MPG(patchyCost, patch = (patchyCost == 1))"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-2-exploring-the-voronoi-tessellation","dir":"Articles","previous_headings":"Modelling with grainscape > Model 2: Patch grains of connectivity","what":"Step 2: Exploring the Voronoi tessellation","title":"Modelling, visualization and analysis with the `grainscape` package","text":"build GOC graph, explore essential building block GOC, Voronoi tessellation. particular Voronoi tessellation first described elsewhere (Fall et al. 2007) complement MPG. identified finding region proximity resistance units around resource patch. contrast well-known Voronoi tessellation generators points distance Euclidean, tessellation uses two-dimensional patches generators distance calculated cost resistance space. tessellation found grainscape using marching algorithm implemented C++. Voronoi tessellation extracted part finding MPG(). plot Voronoi tessellation patches superimposed shown . Voronoi tessellation. complement MPG. patches (darkest blue) used generators, regions proximity (polygons different colours) found cost resistance units. method first described Fall et al. (2007).","code":"patchPlusVoronoi <- patchyMPG@voronoi patchPlusVoronoi[patchyMPG@patchId] <- 0  ggplot() +   geom_raster(data = ggGS(patchPlusVoronoi), aes(x = x, y = y, fill = value))"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-3-building-goc-models","dir":"Articles","previous_headings":"Modelling with grainscape > Model 2: Patch grains of connectivity","what":"Step 3: Building GOC models","title":"Modelling, visualization and analysis with the `grainscape` package","text":"GOC analysis essentially scalar thresholding analysis (see threshold() ) except graph thresholded one Voronoi polygons rather patches. particular, MPG Voronoi polygons thresholded. links added, Voronoi polygons linked, relevant polygons combined describing larger connected regions. additional step links connecting pair polygons mean value links connecting patches two polygons MPG (Galpern, Manseau, Wilson 2012). function GOC() builds GOC models multiple thresholds. threshold() can specify number thresholds, grains connectivity models, want create using nThresh parameter.","code":"patchyGOC <- GOC(patchyMPG, nThresh = 10)"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"step-4-visualizing-a-goc-model","dir":"Articles","previous_headings":"Modelling with grainscape > Model 2: Patch grains of connectivity","what":"Step 4: Visualizing a GOC model","title":"Modelling, visualization and analysis with the `grainscape` package","text":"get quick sense connected regions described GOC model given threshold (scale movement) can use function grain(). example uses functions plotting mechanism plot 6th threshold patchyGOC object. shows resulting plot. visualization GOC model. case 6th scale threshold extracted. Voronoi polygons imply regions functionally-connected given movement threshold. remainder document serves reference modelling, visualization analysis using grainscape package. Please refer visual table contents.","code":"plot(grain(patchyGOC, whichThresh = 6), quick = \"grainPlot\", theme = FALSE) ## Extracting voronoi boundaries..."},{"path":[]},{"path":[]},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"planar-network-with-one-dimensional-nodes-on-a-euclidean-surface","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Modelling","what":"Planar network with one-dimensional nodes on a Euclidean surface","title":"Modelling, visualization and analysis with the `grainscape` package","text":"One-dimensional nodes (.e., points) can represent map locations ecological spatial process interest. Euclidean distance points easily calculated R using dist() function, may interested path distance just immediate neighbours point. planar network extracted Euclidean resistance surface can used identify nodes neighbours find pairwise distances (Fall et al. 2007; Galpern, Manseau, Fall 2011). grainscape Euclidean resistance surface simply resistance surface values = 1) planar network one-dimensional point nodes extracted using grainscape. Nodes represented points labelled patchId. Links line segments among nodes. distance nodes can extracted objects. Note distances integers, represent Euclidean distance, rather accumulated path distance among nodes. particular raster one cell equals one unit distance, therefore distances count cells separating nodes.","code":"## Make a new resistance raster of 400 by 400 cells ## with a coordinate system that corresponds to cells res <- raster(xmn = 0, xmx = 100, ymn = 0, ymx = 100, resolution = 1)  ## Assign all values to 1 res[] <- 1  ## Create 20 \"random\" points representing nodes, ## (i.e. the loci of a process of interest) pts <- data.frame(   x = rep(seq(10, 90, length.out = 5), 4),   y = seq(10, 90, length.out = 4) ) +   cbind(runif(20) * 10, runif(20) * 10)  ## Represent these on a patch raster ## by duplicating the resistance raster and ## setting the relevant cells to 1 patchPts <- res patchPts <- setValues(patchPts, 0) patchPts[cellFromXY(patchPts, pts)] <- 1  ## Extract the MPG mpg <- MPG(res, patchPts)  ## Plot the result using the quick 'network' visualization ## setting and add labels (dodging them by 3 to the upper-right) figure09 <- plot(mpg, quick = \"network\", theme = FALSE) +   geom_text(     data = ggGS(mpg, \"nodes\"),     aes(x = x + 3, y = y + 3, label = patchId)   ) +   ggtitle(\"Planar 1D; Euclidean surface\") figure09 ## Here we show the first five rows of the link attribute table ## extracted from the mpg object. This shows selected columns, ## using the formatting function kable() neighbours <- graphdf(mpg)[[1]]$e[, c(1, 2, 4)] neighbours <- neighbours[order(neighbours[, 1]), ][1:5, ] names(neighbours) <- c(\"Node 1\", \"Node 2\", \"Path distance (Euclidean)\") kable(neighbours, row.names = FALSE)"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"planar-network-with-one-dimensional-nodes-on-a-non-euclidean-resistance-surface","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Modelling","what":"Planar network with one-dimensional nodes on a non-Euclidean resistance surface","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Similarly, distance among points, nodes, best explained cost resistance, neighbour distance can modelled identical manner, leveraging planarity network. difference code previous 1D Euclidean example use resistance surface rather raster consisting value 1. borrow objects made previous steps keep code concise. planar network one-dimensional nodes extracted resistance surface. Nodes represented grey-coloured cells labelled patchId. Links green paths nodes, shown spatially-explicit representation. distances nodes still integers, also represent path distance. Now, rather shortest accumulated path distance resistance surface nodes. , metric integer resistance values also integers. table demonstrates non-Euclidean path distance longer among pairs nodes, perfectly correlated, expect.","code":"## Add some cost values to the resistance ## surface we used in the last step ## Here we use random integers >= 2 res2 <- res res2[] <- floor(runif(ncell(res2)) * 10 + 1)  ## Extract the minimum planar graph using the ## raster made previously which represents the points only mpg <- MPG(res2, patchPts)  ## Plot the result using the quick 'mgplot' visualization ## setting and add labels (dodging them by 3 to the upper-right) ## This demonstrates the non-linear paths. figure10 <- plot(mpg, quick = \"mpgPlot\", theme = FALSE) +   geom_text(     data = ggGS(mpg, \"nodes\"),     aes(x = x + 3, y = y + 3, label = patchId)   ) +   ggtitle(\"Planar 1D; Resistance surface\") figure10 ## Here we show the first five rows of the link attribute table ## extracted from the mpg object. This shows selected columns, using ## the formatting function kable() resNeighbours <- graphdf(mpg)[[1]]$e[, c(1, 2, 4)] resNeighbours <- resNeighbours[order(resNeighbours[, 1]), ][1:5, ] comparison <- cbind(neighbours, resNeighbours)[, -c(4, 5)] names(comparison)[4] <- c(\"Path distance (Resistance)\") kable(comparison, row.names = FALSE)"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"planar-network-with-two-dimensional-nodes-on-a-non-euclidean-resistance-surface-minimum-planar-graph","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Modelling","what":"Planar network with two-dimensional nodes on a non-Euclidean resistance surface (minimum planar graph)","title":"Modelling, visualization and analysis with the `grainscape` package","text":"minimum planar graph (MPG) (Fall et al. 2007), inspiration grainscape package. Please see first part document thorough presentation MPG. Andrew Fall colleagues originally articulated graph theory-based model spatial graph. approach built graph (network) patches , critically, aware spatially-explicit landscape. incorporated multiple landscape elements might visible map, shape, size configuration two-dimensional node patches well continuous geographic variation spaces nodes (.e., matrix). minimum planar graph (MPG) matrix presents resistance connectivity influences paths therefore lengths links. shape, size configuration patches respect neighbours influences patch perimeters links begin end. value using patch perimeters rather centroids potentially improves estimation shortest paths among patches. MPG can understood planar network (.e., links “cross” nodes), provides efficient representation connections among neighbouring nodes. nodes two-dimensional patches links shortest paths resistance surface. following example uses realistic resistance surface based simulated land cover raster. minimum planar graph (MPG) simulated resistance surface. Focal patches grey regions green lines indicate spatially-explicit links among patches. Several patches labelled numerical patchId. distances perimeters nodes along paths links (green figure) available output object manner .","code":"## Load a land cover raster distributed with grainscape frag <- raster(system.file(\"extdata/fragmented.asc\", package = \"grainscape\"))  ## Convert land cover to resistance units ## Use an \"is-becomes\" reclassification isBecomes <- cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))  fragRes <- reclassify(frag, rcl = isBecomes)  ## Extract a network using cells = 1 on original raster ## as the focal patches or nodes patches <- (frag == 1) fragMPG <- MPG(fragRes, patch = patches)  ## Plot the minimum planar graph with node labels for several ## focal nodes of interest figure11 <- plot(fragMPG, quick = \"mpgPlot\", theme = FALSE) +   geom_text(     data = ggGS(fragMPG, \"nodes\"),     aes(       x = x, y = y,       label = ifelse(patchId %in% c(7, 23, 52, 106, 158, 221),         patchId, \"\"       )     ),     size = 2   ) +   ggtitle(\"Planar 2D; Resistance surface\") figure11 ## Here we show only patch 7 and its neighbours that are labelled on ## the network using the formatting function kable(). fragNeighbours <- graphdf(fragMPG)[[1]]$e[, c(1, 2, 4)] fragNeighbours <- fragNeighbours[order(fragNeighbours[, 1]), ][1:5, ] names(fragNeighbours) <- c(\"Node 1\", \"Node 2\", \"Path distance (Resistance)\") kable(fragNeighbours, row.names = FALSE)"},{"path":[]},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"centroid-representation-of-nodes","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Visualization","what":"Centroid representation of nodes","title":"Modelling, visualization and analysis with the `grainscape` package","text":"nodes represent two-dimensional regions (e.g, patches, protected areas) can convenient visualize nodes points plotted centroid location region (Urban Keitt 2001; Galpern, Manseau, Fall 2011). links may measured patch perimeters, quantities related nodes summarized across patch areas, visualization can improved omitting complexities . Cases centroid node representation may justified include: (1) mapping topology complex network; (2) mapping number distribution links; (3) mapping properties nodes (see example ); , (4) large plotting extent makes regions hard see. example uses resistance surface minimum planar graph previous example (fragMPG). minimum planar graph (MPG) shown centroid node representation linear link representation among nodes.","code":"## Plot the minimum planar graph using centroid nodes ## A single line of code will do this as follows: ## plot(fragMPG, quick = \"network\")  ## However the following approach gives more control, ## allowing reduction of the size of the nodes to avoid crowding figure12 <- ggplot() +   geom_segment(     data = ggGS(fragMPG, \"links\"),     aes(       x = x1, y = y1, xend = x2, yend = y2,       colour = \"forestgreen\", size = 0.25     )   ) +   geom_point(     data = ggGS(fragMPG, \"nodes\"),     aes(x = x, y = y, colour = \"darkgreen\", size = 0.5)   ) +   scale_colour_identity() +   scale_size_identity() +   ggtitle(\"Centroid representation of nodes\") ## Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. ## ℹ Please use `linewidth` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated. figure12"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"perimeter-representation-of-links","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Visualization","what":"Perimeter representation of links","title":"Modelling, visualization and analysis with the `grainscape` package","text":"spatially-explicit nature connections among nodes important, perimeter representation links two-dimensional visualization nodes may useful technique. Plotting region covered node, links lines drawn perimeters regions efficient way convey topology network parts node closest neighbours. also signals linking nodes done perimeter rather centroid. example extends previous one, centroid representation links used. minimum planar graph (MPG) links represented perimeter patches (.e., start end points spatially-explicit links). rendering can simplify visualization.","code":"## Plot the minimum planar graph using perimeter links ## and two dimensional nodes figure13 <- plot(fragMPG, quick = \"mpgPerimPlot\", theme = FALSE) +   ggtitle(\"Perimeter representation of links\") figure13"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"spatially-explicit-representation-of-links","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Visualization","what":"Spatially-explicit representation of links","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Spatially-explicit representation links implies end points links perimeter region represented node, predicted shortest paths among node perimeters coordinates. approach conveys available spatial information minimum planar graph. also potential mislead. Shortest paths nodes estimates shortest distance resistance surface necessarily route process interest actually flows. kind representation therefore used appropriate caution. However, using visualization efficiently communicate minimum planar graph model constructed, suggests parts resistance surface may influence pattern connections among nodes, may aid interpretation. example uses data previous one permit comparison among visualizations. minimum planar graph (MPG) shortest links among patch perimeters rendered spatially-explicit paths. rendering can help demonstrate modelling procedure, risks overinterpretation actual paths involved (see text).","code":"## Plot the minimum planar graph using spatially-explicit links ## and two dimensional nodes. figure14 <- plot(fragMPG, quick = \"mpgPlot\", theme = FALSE) +   ggtitle(\"Spatially-explicit representation of links\") figure14"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"characteristics-of-nodes-weights","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Visualization","what":"Characteristics of nodes (weights)","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Variables associated focal ecological process node can represented network visualization. variables sometimes known node “weights”. example, nodes represent regions patches habitat protected areas, useful node weight may area region represented node. Equally, measures node quality area core edge habitat represented. metric associated node can plotted node varying shape, size colour plotting symbol. example, area patch represented node used scale size symbol plotted centroid node. minimum planar graph (MPG) centroid node representation links centroids, plotted size node symbol scaled area patch represents.","code":"figure15 <- ggplot() +   geom_segment(     data = ggGS(fragMPG, \"links\"),     aes(x = x1, y = y1, xend = x2, yend = y2),     colour = \"forestgreen\"   ) +   geom_point(     data = ggGS(fragMPG, \"nodes\"),     aes(x = x, y = y, size = patchArea), colour = \"darkgreen\"   ) +   scale_size_area(max_size = 10, breaks = c(1000, 3000)) +   ggtitle(\"Characteristics of nodes (weights)\") figure15"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"characteristics-of-links-weights","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Visualization","what":"Characteristics of links (weights)","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Variables associated links, called link weights, often contain information modelled connectivity among nodes. Measures interest ecology can include expected flow organisms, variable correlated flow geographic distance distance shortest path across resistance surface. example, length shortest path patch perimeters plotted varying width link connecting nodes. link weight found proportion Euclidean distance nodes. , proportions higher 1 imply resistance movement greater expected distance alone. scale used thinner lines describe greater expectation connectivity ecological process influenced resistance (proportion closer 1). minimum planar graph centroid node link representation width links scaled proportion reduction connectivity due resistance. Wider links correspond reduced connectivity.","code":"figure16 <- ggplot() +   geom_segment(     data = ggGS(fragMPG, \"links\"),     aes(       x = x1, y = y1, xend = x2, yend = y2,       size = lcpPerimWeight / (sqrt((x2 - x1)^2 + (y2 - y1)^2))     ),     colour = \"forestgreen\", alpha = 0.5   ) +   scale_size(range = c(0, 3), breaks = seq(1, 6, by = 0.5)) +   geom_point(     data = ggGS(fragMPG, \"nodes\"),     aes(x = x, y = y), size = 3, colour = \"darkgreen\"   ) +   ggtitle(\"Characteristics of links (weights)\") figure16"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"link-thresholding-by-plotting","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Visualization","what":"Link thresholding by plotting","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Removing links weights greater threshold value referred link thresholding can used identify components, connected sets nodes (Urban Keitt 2001; Galpern, Manseau, Fall 2011). basic approach scaling network, technique upon grains connectivity based (see later examples). , remove links greater threshold 20. measured units resistance surface. Thresholding level implies wish remove links represent cumulative path distance resistance surface 20 times dimension raster cell. resulting components (also called clusters) network identify groups nodes minimum level connectivity among . simplest approach link thresholding, rather remove links network greater threshold, elect plot . rendering longer links transparent (NA ggplot2 colour specification transparency). visualization may useful demonstrate nodes strongly connected one another. adequate job highlighting groups nodes connected single component cluster. However, can better. See next example. link threshold representation minimum planar graph (MPG), links connect centroids adjacent patches component (cluster). Nodes form component shown circles without links.","code":"figure17 <- ggplot() +   geom_raster(     data = ggGS(fragMPG, \"patchId\"),     aes(x = x, y = y, fill = value > 0)   ) +   scale_fill_manual(values = \"grey\") +   geom_segment(     data = ggGS(fragMPG, \"links\"),     aes(       x = x1, y = y1, xend = x2, yend = y2,       colour = lcpPerimWeight > 20     )   ) +   scale_colour_manual(values = c(\"forestgreen\", NA)) +   geom_point(     data = ggGS(fragMPG, \"nodes\"),     aes(x = x, y = y), colour = \"darkgreen\"   ) +   ggtitle(\"Link thresholding by plotting\") figure17"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"link-thresholding-to-show-components","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Visualization","what":"Link thresholding to show components","title":"Modelling, visualization and analysis with the `grainscape` package","text":"noted last example, highlighting nodes connected components (clusters) network subjected link thresholding can improve visualization connected regions map. , grainscape::threshold() used remove links longer certain length igraph model landscape network. igraph::components() function called label nodes membership particular component (cluster). can use information label nodes component membership. improve visualization, nodes also plotted large circles labels reverse colour. also done (perhaps effectively) using colour shape scale node symbols carefully selected accentuate patterns interest figure. link threshold representation minimum planar graph (MPG), links connect centroids adjacent patches component (cluster). Nodes part component labelled component membership.","code":"## Use the grainscape::threshold() function to create a new network ## by thresholding links fragTh <- threshold(fragMPG, doThresh = 20)  ## Find the components in that thresholded network using ## an igraph package function fragThC <- components(fragTh$th[[1]])  ## Extract the node table and append the ## component membership information fragThNodes <- data.frame(vertex_attr(fragTh$th[[1]]),   component = fragThC$membership )  ## We don't want to show nodes that are in components with ## only one node, so remove them singleNodes <- fragThNodes$component %in% which(fragThC$csize == 1) fragThNodes <- fragThNodes[!(singleNodes), ]  ## Rename some columns to improve readability fragThNodes$x <- fragThNodes$centroidX fragThNodes$y <- fragThNodes$centroidY  figure18 <- ggplot() +   geom_raster(     data = ggGS(fragMPG, \"patchId\"),     aes(x = x, y = y, fill = value > 0)   ) +   scale_fill_manual(values = \"grey\") +   geom_segment(     data = ggGS(fragMPG, \"links\"),     aes(       x = x1, y = y1, xend = x2, yend = y2,       colour = lcpPerimWeight > 20     )   ) +   scale_colour_manual(values = c(\"forestgreen\", NA)) +   geom_point(     data = fragThNodes,     aes(x = x, y = y), shape = 19, size = 4, colour = \"darkgreen\"   ) +   geom_text(     data = fragThNodes, aes(x = x, y = y, label = component),     colour = \"white\", size = 2   ) +   ggtitle(\"Link thresholding to show components\") figure18"},{"path":[]},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"network-metrics-to-assess-node-importance","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Analysis","what":"Network metrics to assess node importance","title":"Modelling, visualization and analysis with the `grainscape` package","text":"numerous network metrics available describe properties nodes network topology. igraph package used grainscape implements selection metrics. simple intuitive node-based network metric degree. count number links adjacent node. node higher degree, , might deemed contributing connectivity. usefulness metric depends application, sophisticated measures node importance centrality may appropriate. also available igraph. However caution appropriate, MPG approximation possible links among nodes. Please see Galpern, Manseau, Fall (2011) information limitation. demonstrate calculate degree using igraph package visualize result simple network analysis. calculate degree link thresholded network, implying maximum level link resistance consider link making contribution node’s connectivity. link threshold representation minimum planar graph (MPG), nodes, plotted patch centroids, scaled proportion degree node (.e., number links adjacent node). Larger circles indicate nodes higher degree MPG.","code":"## Assess degree on the nodes of a thresholded network ## made in the previous example (threshold = 20) fragThDegree <- degree(fragTh$th[[1]])  ## Add degree to the node table fragThNodes <- data.frame(vertex_attr(fragTh$th[[1]]), degree = fragThDegree)  ## Remove nodes with a degree of 0 fragThNodes <- fragThNodes[fragThNodes$degree > 0, ]  ## Rename some columns to improve readability fragThNodes$x <- fragThNodes$centroidX fragThNodes$y <- fragThNodes$centroidY  figure19 <- ggplot() +   geom_raster(     data = ggGS(fragMPG, \"patchId\"),     aes(x = x, y = y, fill = value > 0)   ) +   scale_fill_manual(values = \"grey\") +   geom_segment(     data = ggGS(fragMPG, \"links\"),     aes(       x = x1, y = y1, xend = x2, yend = y2,       colour = lcpPerimWeight > 20     )   ) +   scale_colour_manual(values = c(\"forestgreen\", NA)) +   geom_point(     data = fragThNodes,     aes(x = x, y = y, size = degree), colour = \"darkgreen\"   ) +   ggtitle(\"Node importance metrics (degree)\") figure19"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"shortest-path-distance-between-nodes","dir":"Articles","previous_headings":"Landscape networks with 1D and 2D nodes > Analysis","what":"Shortest-path distance between nodes","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Finding shortest path network source destination node length path useful prediction network model many applications (Zeller, McGarigal, Whiteley 2012; Galpern, Manseau, Wilson 2012; Adriaensen et al. 2003) . gives expected distance network, taking account modelled connectivity among nodes. example illustrates use igraph functions find shortest path network, calculate length metric resistance surface, visualize path. plot uses links patch centroids recolouring patch raster add emphasis. use link thresholded network, , (simplicity), entire network completely connected, certain patches may shortest path . Finding shortest paths thresholded networks may still useful technique, absence shortest path important finding. shortest path minimum planar graph (MPG) given start end patchId. Links nodes form part “corridor” highlighted. Pairwise distances set nodes can found using igraph::distances() function follows.","code":"## Declare the start and end patchIds ## These were identified by plotting the patchIds (see earlier examples) startEnd <- c(1546, 94)  ## Find the shortest path between these nodes using ## the shortest path through the resistance surface ## (i.e. weighted by 'lcpPerimWeight') shPath <- shortest_paths(fragMPG$mpg,   from = which(V(fragMPG$mpg)$patchId == startEnd[1]),   to = which(V(fragMPG$mpg)$patchId == startEnd[2]),   weights = E(fragMPG$mpg)$lcpPerimWeight,   output = \"both\" )  ## Extract the nodes and links of this shortest path shPathN <- as.integer(names(shPath$vpath[[1]])) shPathL <- E(fragMPG$mpg)[shPath$epath[[1]]]$linkId  ## Produce shortest path tables for plotting shPathNodes <- subset(ggGS(fragMPG, \"nodes\"), patchId %in% shPathN) shPathLinks <- subset(ggGS(fragMPG, \"links\"), linkId %in% shPathL)  ## Find the distance of the shortest path shPathD <- distances(fragMPG$mpg,   v = which(V(fragMPG$mpg)$patchId == startEnd[1]),   to = which(V(fragMPG$mpg)$patchId == startEnd[2]),   weights = E(fragMPG$mpg)$lcpPerimWeight )[1]  ## Plot shortest path figure20 <- ggplot() +   geom_raster(     data = ggGS(fragMPG, \"patchId\"),     aes(       x = x, y = y,       fill = ifelse(value %in% shPathN, \"grey70\", \"grey90\")     )   ) +   scale_fill_identity() +   geom_segment(     data = shPathLinks, aes(x = x1, y = y1, xend = x2, yend = y2),     colour = \"forestgreen\", size = 1   ) +   geom_point(data = shPathNodes, aes(x = x, y = y), colour = \"darkgreen\") +   ggtitle(\"Shortest-path distance between nodes\") +   annotate(\"text\", 260, 340,     label = paste0(shPathD, \" resistance units\"), size = 2.5   ) figure20 ## Create a pairwise table of shortest path distances among nodes using ## the resistance surface based links allShPathD <- distances(fragMPG$mpg, weights = E(fragMPG$mpg)$lcpPerimWeight)  ## Create a table for the first 8 nodes tableD <- allShPathD[1:8, 1:8] tableD[upper.tri(tableD)] <- NA dimnames(tableD)[[1]] <- paste(\"patchId\", dimnames(tableD)[[1]], sep = \" \")  kable(tableD)"},{"path":[]},{"path":[]},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"scaling-resistance-surfaces-lattice-grains-of-connectivity","dir":"Articles","previous_headings":"Scaling landscape networks > Modeling","what":"Scaling resistance surfaces (lattice grains of connectivity)","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Resistance surfaces produced remotely-sensed land cover elevation data may fine-scaled process modelled. scale mismatched one interest, signal pattern may obscured (Cushman Landguth 2010). common strategy upscale rasters remove potentially unimportant variation coalescing adjacent raster cells representing mode mean. Another approach uses moving windows smooth variation (Galpern Manseau 2013a). grainscape enables different approach upscaling resistance surface based remotely-sensed data. Lattice grains connectivity drops lattice focal points (nodes), finds minimum planar graph complementary Voronoi polygons resistance surface among points, coalesces adjacent Voronoi polygons using graph guidance. can classified model-based approach upscaling (model resistance surface, representation ecological geographical process). Unlike arbitrarily upscaling raster based cell-proximity, approach uses spatial information surface . grid spacing lattice well amount link thresholding together influence amount upscaling occurs. example uses familiar resistance surface previous examples. specifies lattice grid spacing 25 cells. use grainscape grains connectivity analysis functions coalesce Voronoi polygons 5 thresholds scales. examine resulting lattice grains connectivity five scales. choose third illustrate intermediate level scaling. scaled lattice grains connectivity (GOC) model showing outline Voronoi polygons grey, network connections among polygons links plotted adjacent polygon centroids.","code":"## Extract a minimum planar graph and complementary ## Voronoi polygons from the fragmented resistance surface ## Note the use of an integer for the 'patch' parameter, which ## specifies the spacing in cells of the lattice grid fragLatticeMPG <- MPG(fragRes, patch = 25)  ## Extract grains of connectivity from this MPG at ## five link thresholds (or scales) fragLatticeGOC <- GOC(fragLatticeMPG, nThresh = 5)  ## Visualize the Voronoi polygons at the third threshold figure21 <- plot(grain(fragLatticeGOC, whichThresh = 3),   quick = \"grainPlot\", theme = FALSE ) +   ggtitle(\"Lattice grains of connectivity\") ## Extracting voronoi boundaries... figure21"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"scaling-networks-with-two-dimensional-nodes-patch-grains-of-connectivity","dir":"Articles","previous_headings":"Scaling landscape networks > Modeling","what":"Scaling networks with two-dimensional nodes (patch grains of connectivity)","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Patch grains connectivity extends idea point nodes lattice model two-dimensional node regions (Galpern, Manseau, Wilson 2012). leverages minimum planar graph demonstrated previous examples complement Voronoi tessellation resistance surface. Voronoi polygons identified coalesced different thresholds “grains” models. key contribution capacity model landscape connectivity multiple spatial scales, account uncertainty nature patch surrounding matrix (Galpern, Manseau, Wilson 2012; Galpern Manseau 2013a). use polygons rather discrete two dimensional nodes (.e., surrounded matrix presents resistance) allows uncertainty patch definition. approach may particularly valuable ecology modelling landscape connectivity highly-mobile terrestrial animals, patch definition resistance surface parameterization large amounts uncertainty. product continuously distributed set two-dimensional nodes, every point surface associated node. Critically polygons can scaled. Relationships among polygons based relationships among two-dimensional nodes contained within. later example show grains connectivity can used identify potential spatial corridors points. patch grains connectivity model uses familiar resistance surface patches (=1) used many earlier examples. scaled patch grains connectivity (GOC) model showing outline Voronoi polygons grey, network connections among polygons links plotted adjacent polygon centroids.","code":"## Use the MPG extracted in previous examples to find a ## patch grains of connectivity model, where patches ## are cells on the resistance surface equal to 1 ## Do this at five thresholds fragPatchGOC <- GOC(fragMPG, nThresh = 5)  ## Plot the fourth grain figure22 <- plot(grain(fragPatchGOC, whichThresh = 4),   quick = \"grainPlot\", theme = FALSE ) +   ggtitle(\"Patch grains of connectivity\") ## Extracting voronoi boundaries... figure22"},{"path":[]},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"characteristics-of-grains-of-connectivity","dir":"Articles","previous_headings":"Scaling landscape networks > Visualization","what":"Characteristics of grains of connectivity","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Voronoi polygons complementary given scale threshold landscape network describe geographic area. polygons coalesced network scaled, grainscape collects summary statistics several variables newly aggregated areal units. include total area core area two-dimensional nodes fall within boundary polygon, median link weight within cluster, several others. Visualizing quantities multiple spatial scales (.e., grains) can support sensitivity analysis area connectivity sub-regions model. example, assess availability connected habitat protected areas, risks functioning elements. following example maps amount core area patches intermediate scale varying size symbols plotted centroids Voronoi polygons. Core area defined area patches polygon excluding edges patches, consists one-cell wide margin. resistance surface node core area appears correlated generally size Voronoi polygon (.e., larger node circles appear larger polygons) scaled patch grains connectivity (GOC) model showing outline Voronoi polygons grey, network connections among polygons. Node symbols scaled proportion core area patches (.e., area excluding edge) contained within Voronoi polygon.","code":"## Put the fourth grain of the GOC model into its own object fragPatchGrain4 <- grain(fragPatchGOC, whichThresh = 4)  figure23 <- ggplot() +   geom_raster(     data = ggGS(fragPatchGrain4, \"vorBound\"),     aes(x = x, y = y, fill = ifelse(value > 0, \"grey\", \"white\"))   ) +   scale_fill_identity() +   geom_segment(     data = ggGS(fragPatchGrain4, \"links\"),     aes(x = x1, y = y1, xend = x2, yend = y2), colour = \"forestgreen\"   ) +   geom_point(     data = ggGS(fragPatchGrain4, \"nodes\"),     aes(x = x, y = y, size = totalCoreArea), colour = \"darkgreen\"   ) +   ggtitle(\"Voronoi polygon metrics (core area)\") ## Extracting voronoi boundaries... figure23"},{"path":[]},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"corridor-analyses-at-multiple-scales","dir":"Articles","previous_headings":"Scaling landscape networks > Analysis","what":"Corridor analyses at multiple scales","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Finding shortest path grain connectivity conceptually identical finding shortest path nodes minimum planar graph. key difference use grain permits scaling network. Links Voronoi polygons grain selected links components clusters minimum planar graph. minimum planar graph find shortest path nodes disconnected, grains connectivity model goal rather find shortest path disconnected components (represented Voronoi polygons). links connecting polygons shortest span patches two components. application grains connectivity scale corridor analysis, effectively find shortest path two locations map understand sensitive path may scale. example, use grainscape function corridor() identify plot corridor. grains connectivity continuously distributed across map need provide focal node patch identifier. Rather, pass coordinates function. corridor scaled patch grains connectivity (GOC) model. black nodes links demonstrate corridor polygons containing start end points (plotted red X). Green nodes links show remainder grains connectivity network.","code":"## Set coordinates for the start and end of the corridor startEnd <- rbind(c(5, 180), c(395, 312))  fragCorridor3 <- corridor(fragPatchGOC, whichThresh = 3, coords = startEnd)  ## Use the default plotting functionality for corridor objects figure24 <- plot(fragCorridor3, theme = FALSE) +   annotate(\"text\",     x = startEnd[1, 1], y = startEnd[1, 2] - 20,     label = \"START\", colour = \"red\", size = 2   ) +   annotate(\"text\",     x = startEnd[1, 1], y = startEnd[1, 2],     label = \"X\", colour = \"red\", size = 2   ) +   annotate(\"text\",     x = startEnd[2, 1], y = startEnd[2, 2] + 20,     label = \"END\", colour = \"red\", size = 2   ) +   annotate(\"text\",     x = startEnd[2, 1], y = startEnd[2, 2],     label = \"X\", colour = \"red\", size = 2   ) +   annotate(\"text\",     x = 250, y = 400,     label = paste0(       \"Corridor length: \",       round(fragCorridor3@corridorLength, 0),       \" resistance units\"     ), size = 2   ) +   ggtitle(\"Corridor analysis; grain of connectivity\") ## Extracting Voronoi boundaries... figure24"},{"path":"https://alexchubaty.com/grainscape/articles/grainscape_vignette.html","id":"modeling-1","dir":"Articles","previous_headings":"Scaling landscape networks","what":"Modeling","title":"Modelling, visualization and analysis with the `grainscape` package","text":"Distances polygons multiple scales grainscape provides functions automate corridor analyses multiple scales (grains), multiple points map. products distance matrices. example, grain depicted previous corridor analysis used find pairwise shortest path distances eight randomly positioned points. Distances grains available GOC object produced. However, table appears shows distances grain. scaled patch grains connectivity (GOC) model showing outline Voronoi polygons grey, network connections among polygons links plotted adjacent polygon centroids. locations eight focal points used calculate pairwise distance matrix plotted red.","code":"## Create eight random points on the map pts <- cbind(sample(seq_len(ncol(fragRes)))[1:8], sample(seq_len(nrow(fragRes)))[1:8])  ## Plot these points and the grains of connectivity network figure25 <- plot(grain(fragPatchGOC, 4), quick = \"grainPlot\", theme = FALSE) +   annotate(\"text\", x = pts[, 1], y = pts[, 2], label = 1:8, colour = \"red\") +   ggtitle(\"Eight points for pairwise distances\") ## Extracting voronoi boundaries... figure25 ## Find the pairwise distances between them at all grains ## available in the GOC object created earlier ptsD <- grainscape::distance(fragPatchGOC, pts)  ## Extract distances for the grain of interest (4) ptsD2 <- ptsD$th[[4]]$grainD  ## Prepare this distance matrix for printing ptsD2[upper.tri(ptsD2)] <- NA ptsD2 <- round(ptsD2, 1) dimnames(ptsD2)[[1]] <- paste0(   \"Point \", 1:8, \" (Polygon \",   dimnames(ptsD2)[[2]], \")\" ) dimnames(ptsD2)[[2]] <- 1:8  kable(ptsD2)"},{"path":[]},{"path":"https://alexchubaty.com/grainscape/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Paul Galpern. Author, copyright holder. Sam Doctolero. Author. Alex M Chubaty. Author, maintainer.","code":""},{"path":"https://alexchubaty.com/grainscape/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chubaty , Galpern P, Doctolero S (2020). “R toolbox grainscape modelling visualizing landscape connectivity using spatially-explicit networks.” Methods Ecology Evolution, 11(4), 591–595. doi:10.1111/2041-210X.13350. Chubaty , Galpern P, Doctolero S (2023). grainscape: Landscape Connectivity, Habitat, Protected Area Networks. R package version 0.4.4, https://CRAN.R-project.org/package=grainscape.","code":"@Article{,   title = {The {R} toolbox {grainscape} for modelling and visualizing landscape connectivity using spatially-explicit networks},   author = {Alex M Chubaty and Paul Galpern and Sam C Doctolero},   journal = {Methods in Ecology and Evolution},   year = {2020},   volume = {11},   number = {4},   pages = {591--595},   doi = {10.1111/2041-210X.13350}, } @Manual{,   title = {{grainscape}: Landscape Connectivity, Habitat, and Protected Area Networks},   author = {Alex M Chubaty and Paul Galpern and Sam Doctolero},   year = {2023},   note = {R package version 0.4.4},   url = {https://CRAN.R-project.org/package=grainscape}, }"},{"path":"https://alexchubaty.com/grainscape/cran-submission.html","id":null,"dir":"","previous_headings":"","what":"CRAN submission checklist","title":"CRAN submission checklist","text":"ensure tests passing locally many machines possible (mac, linux, win) ensure passing GitHub Actions https://github.com/achubaty/grainscape/actions check code formatting cleanup needed ensure passing win-builder oldrelease, release, devel bump version number DESCRIPTION (use non-devel suffix – .9000) update NEWS.md rebuild docs ensure vignettes compressed update cran-comments (incl. versions tested) run spell checks run revdep checks (see revdep/check.R) merge development branch main remove Remotes DESCRIPTION submit CRAN","code":"devtools::check(args = c('--as-cran'), build_args = c('--compact-vignettes=both')) #install_github(\"jimhester/lintr\") library(lintr) lint_package() check_win_oldrelease(args = \"--compact-vignettes=both\") check_win_release(args = \"--compact-vignettes=both\") check_win_devel(args = \"--compact-vignettes=both\") devtools::show_news() devtools::document() tools::compactPDF(\"vignettes\", qpdf = \"/usr/bin/qpdf\", gs_quality = \"ebook\") spelling::spell_check_package() spelling::update_wordlist() devtools::release(args = \"--compact-vignettes=both\")"},{"path":[]},{"path":"https://alexchubaty.com/grainscape/index.html","id":"efficient-modelling-of-landscape-connectivity-habitat-and-protected-area-networks","dir":"","previous_headings":"","what":"Efficient Modelling of Landscape Connectivity, Habitat, and Protected Area Networks","title":"Landscape Connectivity, Habitat, and Protected Area Networks","text":"Given landscape resistance surface, creates grains connectivity minimum planar graph models can used calculate effective distances landscape connectivity multiple scales. cross-platform reimplementation update grainscape package (http://grainscape.r-forge.r-project.org). cite grainscape publications, see citation(\"grainscape\").","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/index.html","id":"from-cran","dir":"","previous_headings":"Efficient Modelling of Landscape Connectivity, Habitat, and Protected Area Networks > Installation","what":"From CRAN","title":"Landscape Connectivity, Habitat, and Protected Area Networks","text":"","code":"install.packages(\"grainscape\")"},{"path":"https://alexchubaty.com/grainscape/index.html","id":"from-github","dir":"","previous_headings":"Efficient Modelling of Landscape Connectivity, Habitat, and Protected Area Networks > Installation","what":"From GitHub","title":"Landscape Connectivity, Habitat, and Protected Area Networks","text":"Install development libraries: building packages source requires appropriate development libraries operating system. See details. Windows: install Rtools. macOS: install Xcode commandline tools terminal: xcode-select --install. Debian/Ubuntu Linux: ensure r-base-dev installed. Install GitHub:","code":"#install.packages(\"remotes\") library(\"remotes\") install_github(\"achubaty/grainscape\")"},{"path":"https://alexchubaty.com/grainscape/index.html","id":"reporting-bugs","dir":"","previous_headings":"Efficient Modelling of Landscape Connectivity, Habitat, and Protected Area Networks","what":"Reporting bugs","title":"Landscape Connectivity, Habitat, and Protected Area Networks","text":"Contact us via package GitHub site: https://github.com/achubaty/grainscape/issues.","code":""},{"path":"https://alexchubaty.com/grainscape/index.html","id":"contributions","dir":"","previous_headings":"Efficient Modelling of Landscape Connectivity, Habitat, and Protected Area Networks","what":"Contributions","title":"Landscape Connectivity, Habitat, and Protected Area Networks","text":"Git repository uses Git Flow branching model (git flow extension useful ). development branch contains latest contributions code appear next release, main branch contains code latest release, exactly currently CRAN. make contribution package, just send pull request. send PR, make sure development destination branch grainscape repository. PR pass R CMD check ---cran, also checked GitHub Actions PR submitted.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"Produce grains connectivity (GOC) model multiple scales (resistance thresholds) scalar analysis. Patch-based lattice GOC modelling can done function.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"","code":"GOC(x, ...)  # S4 method for mpg GOC(   x,   nThresh = NULL,   doThresh = NULL,   weight = \"lcpPerimWeight\",   verbose = 0,   ... )"},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"x mpg object produced MPG(). lattice GOC MPG must run patch set integer value. ... Additional arguments (used). nThresh Optional. integer giving number thresholds (scales) create GOC models. Thresholds selected produce maximum number unique grains (.e., models). nThresh thresholds also approximately evenly spread 0 threshold patches focal points landscape connected. simple way get representative subset possible GOC models. Provide either nThresh doThresh . doThresh Optional. vector giving link thresholds create GOC models. Use threshold() identify thresholds interest. Provide either nThresh doThresh . weight string giving link weight attribute use threshold. \"lcpPerimWeight\" uses accumulated resistance least-cost path distance perimeters patches link weight. verbose Set verbose=0 progress information console.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"goc() object.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"Grain scalar analysis connectivity may appropriate variety purposes, limited visualization improving connectivity estimates highly-mobile organisms. See Galpern et al. (2012), Galpern & Manseau (2013a, 2013b) applications review capabilities.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"Researchers consider whether use patch-based GOC lattice GOC model appropriate based patch-dependency organism study. Patch-based models make sense animals restricted , dependent , resource patch. Lattice models can used generalized functional approach scaling resistance surfaces. See MPG() warning related areal measurements.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011) Patch-based graphs landscape connectivity: guide construction, analysis, application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"Paul Galpern","code":""},{"path":"https://alexchubaty.com/grainscape/reference/GOC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a grains of connectivity model at multiple scales (patch-based or lattice GOC) — GOC","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) ## Examine the properties of the GOC graph of grain 3 of 5 graphdf(grain(tinyPatchGOC, whichThresh = 3)) #> [[1]] #> [[1]]$v #>    name polygonId centroidX centroidY polygonArea totalPatchArea #> 1     9         9 82.775739 30.824978        1117             80 #> 2    14        14 91.982587  6.067164         201             26 #> 3     1         1 31.441401 71.328875        2355            349 #> 4    13        13 55.800797 12.209163         502             32 #> 5     8         8 40.915855 33.420723         719             88 #> 6     2         2 72.141353 87.096043        1567            202 #> 7     7         7 11.853001 32.207019         983             68 #> 8    12        12 22.657810 12.435588         621             42 #> 9     5         5 92.944795 58.755521         317              6 #> 10    4         4  8.658451 58.595070         284              9 #> 11   15        15 64.756757  3.216216          74              2 #> 12   11        11 60.324561 33.085965         285             15 #> 13    6         6 73.349741 51.795337         193              4 #> 14    3         3 60.669856 71.672249         418              2 #> 15   17        17 76.169643  4.223214         112              2 #> 16   16        16 36.820000  3.692000         125              2 #> 17   10        10 96.468504 35.633858         127              3 #>    totalPatchEdgeArea totalCoreArea #> 1                  80             0 #> 2                  26             0 #> 3                 336            13 #> 4                  32             0 #> 5                  84             4 #> 6                 197             5 #> 7                  68             0 #> 8                  39             3 #> 9                   6             0 #> 10                  9             0 #> 11                  2             0 #> 12                 15             0 #> 13                  4             0 #> 14                  2             0 #> 15                  2             0 #> 16                  2             0 #> 17                  3             0 #>                                         patchId #> 1                                    68, 80, 86 #> 2                                           100 #> 3  5, 7, 22, 30, 32, 37, 40, 41, 48, 54, 55, 56 #> 4                                       95, 103 #> 5                                        67, 85 #> 6                  8, 9, 12, 14, 19, 28, 29, 31 #> 7                                62, 64, 74, 84 #> 8                                            93 #> 9                                            60 #> 10                                           50 #> 11                                          105 #> 12                                           76 #> 13                                           61 #> 14                                           46 #> 15                                          107 #> 16                                          106 #> 17                                       73, 78 #>  #> [[1]]$e #>    e1 e2 maxWeight linkIdMaxWeight minWeight linkIdMinWeight medianWeight #> 1   9 14        55              34        55              34         55.0 #> 2  14 17        54              35        54              35         54.0 #> 3   1  4       135              74        55              36         95.0 #> 4   1 11        64              37        64              37         64.0 #> 5   1  6        59              38        59              38         59.0 #> 6  13 15        75              41        65              39         70.0 #> 7   8 11        95              60        75              42         85.0 #> 8   1  8        95              59        75              43         75.0 #> 9   1  2       107              62        70              48         76.0 #> 10  7 12        80              47        80              47         80.0 #> 11  2  3       220              89        81              49        140.0 #> 12  9 17        85              51        85              51         85.0 #> 13 12 16        85              52        85              52         85.0 #> 14 13  8        85              55        85              55         85.0 #> 15  5 10        88              58        88              58         88.0 #> 16  7  4       133              79       105              61        119.0 #> 17 15 17       105              63       105              63        105.0 #> 18  8 12       146              81       105              65        125.5 #> 19  1  3       132              78       100              66        127.0 #> 20  9 10       129              72       114              67        121.5 #> 21 13 16       125              76       115              68        120.0 #> 22 13 12       115              69       115              69        115.0 #> 23  9  5       130              70       130              70        130.0 #> 24 13 11       123              71       123              71        123.0 #> 25  9  6       210              88       123              73        166.5 #> 26  9 11       144              80       144              80        144.0 #> 27  2  5       290              90       162              83        226.0 #> 28 11  6       200              84       200              84        200.0 #> 29 13 17       195              85       195              85        195.0 #> 30  9 13       208              86       208              86        208.0 #> 31  6  3       365              91       365              91        365.0 #> 32  9  2       358              92       358              92        358.0 #> 33  2  6       432              93       432              93        432.0 #>    meanWeight numEdgesWeight  linkIdAll eucCentroidWeight #> 1    55.00000              1         34          26.41430 #> 2    54.00000              1         35          15.92009 #> 3    95.00000              2     36, 74          26.10005 #> 4    64.00000              1         37          47.92449 #> 5    59.00000              1         38          46.23709 #> 6    70.00000              2     39, 41          12.69182 #> 7    85.00000              2     42, 60          19.41159 #> 8    81.66667              3 43, 44, 59          39.07420 #> 9    84.33333              3 45, 48, 62          43.64733 #> 10   80.00000              2     47, 53          22.53117 #> 11  147.00000              3 49, 82, 89          19.22209 #> 12   85.00000              1         51          27.40975 #> 13   85.00000              1         52          16.64386 #> 14   85.00000              1         55          25.91316 #> 15   88.00000              1         58          23.38863 #> 16  119.00000              2     61, 79          26.58071 #> 17  105.00000              1         63          11.45723 #> 18  125.50000              2     65, 81          27.81604 #> 19  119.66667              3 66, 77, 78          29.23047 #> 20  121.50000              2     67, 72          14.51266 #> 21  120.00000              2     68, 76          20.80415 #> 22  115.00000              1         69          33.14376 #> 23  130.00000              1         70          29.72415 #> 24  123.00000              1         71          21.36130 #> 25  166.50000              2     73, 88          22.99142 #> 26  144.00000              1         80          22.56474 #> 27  226.00000              2     83, 90          35.15634 #> 28  200.00000              1         84          22.79684 #> 29  195.00000              1         85          21.87842 #> 30  208.00000              2     86, 87          32.77493 #> 31  365.00000              1         91          23.57692 #> 32  358.00000              1         92          57.26712 #> 33  432.00000              1         93          35.32138 #>  #>   ## Extract grains of connectivity ## representation of the finest grain and three others ## by giving thresholds in link weights (doThresh) tinyPatchGOC <- GOC(tinyPatchMPG, doThresh = c(0, 20, 40))"},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"Extracts minimum planar graph (MPG) also first step grains connectivity (GOC) modelling. patch-based lattice MPGs can extracted.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"","code":"MPG(cost, patch, ...)  # S4 method for RasterLayer,RasterLayer MPG(cost, patch, ...)  # S4 method for RasterLayer,numeric MPG(cost, patch, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"cost RasterLayer giving landscape resistance surface, values raster cell proportional resistance movement, dispersal, gene flow organism landscape feature represent. Missing values NA acceptable (see ). Negative values . extract MPG Euclidean links (.e., least-cost path links) set cost[] <- 1. patch raster class RasterLayer patch-based analysis integer lattice analysis. raster given must extent, origin projection cost binary, without missing values, patches=1 non-patches=0. lattice analyses, integer gives spacing raster cells focal points lattice. ... Additional arguments (used).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"mpg() object.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"Use function create minimum planar graph (MPG) can analyzed using igraph() routines. also first step grains connectivity (GOC) modelling.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"Researchers consider whether use patch-based MPG lattice MPG model appropriate based patch-dependency organism study. Patch-based models make sense animals restricted , dependent , resource patch. Lattice models can used generalized functional approach scaling resistance surfaces. Rasters projected geographic coordinates (.e. projection(cost) contain \"+proj=longlat\") function issue warning. unprojected cases consider using projectRaster() change appropriate coordinate system location extent interest balances distance areal accuracy. See https://www.spatialreference.org/ location-specific suggestions. Use geographic coordinates result inaccurate areal distance measurements, rendering models inaccurate.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011) Patch-based graphs landscape connectivity: guide construction, analysis, application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"Paul Galpern, Sam Doctolero, Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/MPG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a minimum planar graph (MPG) model from a landscape resistance surface — MPG","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Explore the graph structure and node/link attributes graphdf(tinyPatchMPG) #> [[1]] #> [[1]]$v #>    name patchId patchArea patchEdgeArea coreArea centroidX centroidY #> 1     5       5        38            37        1  8.684211 95.157895 #> 2     7       7        30            28        2 19.700000 98.000000 #> 3     8       8        46            45        1 43.847826 96.021739 #> 4     9       9        61            58        3 60.795082 96.811475 #> 5    12      12         1             1        0 71.500000 99.500000 #> 6    14      14        65            64        1 84.084615 96.346154 #> 7    19      19         9             9        0 98.944444 95.055556 #> 8    22      22         7             7        0 20.214286 94.642857 #> 9    28      28        14            14        0 51.642857 86.714286 #> 10   29      29         2             2        0 99.000000 88.000000 #> 11   30      30       100            95        5 31.660000 74.740000 #> 12   31      31         4             4        0 98.750000 84.750000 #> 13   32      32         4             4        0  3.000000 83.000000 #> 14   37      37        11            11        0 12.045455 79.954545 #> 15   40      40         7             7        0 24.071429 76.500000 #> 16   41      41        72            67        5 18.680556 70.902778 #> 17   46      46         2             2        0 56.000000 72.500000 #> 18   48      48        32            32        0 26.593750 60.875000 #> 19   50      50         9             9        0 10.500000 61.166667 #> 20   54      54         5             5        0 37.700000 56.700000 #> 21   55      55         4             4        0 47.500000 57.250000 #> 22   56      56        39            39        0 58.448718 50.782051 #> 23   60      60         6             6        0 98.500000 51.666667 #> 24   61      61         4             4        0 71.500000 48.750000 #> 25   62      62        14            14        0 19.000000 43.214286 #> 26   64      64         4             4        0 10.750000 43.500000 #> 27   67      67        76            72        4 40.171053 37.276316 #> 28   68      68         4             4        0 85.000000 42.250000 #> 29   73      73         1             1        0 99.500000 39.500000 #> 30   74      74        32            32        0 17.125000 35.312500 #> 31   76      76        15            15        0 60.166667 34.766667 #> 32   78      78         2             2        0 99.000000 36.000000 #> 33   80      80        21            21        0 78.404762 31.166667 #> 34   84      84        18            18        0  6.555556 24.944444 #> 35   85      85        12            12        0 42.833333 25.500000 #> 36   86      86        55            55        0 86.063636 21.445455 #> 37   93      93        42            39        3 24.285714 14.190476 #> 38   95      95        31            31        0 55.919355 11.725806 #> 39  100     100        26            26        0 90.038462  3.807692 #> 40  103     103         1             1        0 54.500000  4.500000 #> 41  105     105         2             2        0 63.000000  1.000000 #> 42  106     106         2             2        0 35.000000  0.500000 #> 43  107     107         2             2        0 80.000000  0.500000 #>  #> [[1]]$e #>     e1  e2 linkId lcpPerimWeight startPerimX startPerimY endPerimX endPerimY #> 1   62  74      1             12        17.5        41.5      17.5      40.5 #> 2   30  41      2             12        24.5        72.5      24.5      71.5 #> 3   30  40      3             10        24.5        75.5      24.5      74.5 #> 4    7  22      4             10        20.5        96.5      21.5      96.5 #> 5    5   7      5              5        11.5        98.5      12.5      98.5 #> 6   80  86      6             10        82.5        28.5      81.5      28.5 #> 7   73  78      7             15        99.5        37.5      99.5      38.5 #> 8   29  31      8             10        98.5        85.5      98.5      86.5 #> 9   19  29      9             10        99.5        89.5      99.5      90.5 #> 10  67  85     10             20        42.5        28.5      42.5      30.5 #> 11  41  48     11             20        22.5        63.5      22.5      64.5 #> 12  40  41     12             20        19.5        76.5      21.5      76.5 #> 13  37  41     13             20        14.5        76.5      14.5      77.5 #> 14   8  28     14             25        48.5        92.5      50.5      90.5 #> 15   9  12     15             20        67.5        99.5      70.5      99.5 #> 16  12  14     16             30        76.5        99.5      72.5      99.5 #> 17  30  48     17             40        33.5        63.5      29.5      62.5 #> 18   8   9     18             32        53.5        94.5      50.5      95.5 #> 19  48  54     19             35        30.5        56.5      35.5      55.5 #> 20  95 103     20             40        54.5         5.5      56.5       7.5 #> 21  62  64     21             44        11.5        41.5      15.5      41.5 #> 22   5  22     22             40        12.5        93.5      18.5      93.5 #> 23  32  37     23             50         3.5        81.5       9.5      81.5 #> 24  74  84     24             40        10.5        26.5      13.5      30.5 #> 25  55  56     25             45        52.5        53.5      49.5      57.5 #> 26   5  32     26             45         3.5        85.5       6.5      89.5 #> 27   9  28     27             40        52.5        88.5      55.5      92.5 #> 28  68  80     28             45        83.5        40.5      80.5      35.5 #> 29  14  19     29             45        96.5        96.5      90.5      94.5 #> 30  30  54     30             50        38.5        58.5      37.5      65.5 #> 31   5  37     31             45        12.5        90.5      12.5      82.5 #> 32  54  55     32             50        39.5        57.5      45.5      57.5 #> 33  64  74     33             52        11.5        41.5      14.5      38.5 #> 34  86 100     34             55        89.5         7.5      89.5      15.5 #> 35 100 107     35             54        86.5         1.5      81.5       0.5 #> 36  41  50     36             55        11.5        70.5      12.5      63.5 #> 37  56  76     37             64        58.5        37.5      58.5      45.5 #> 38  56  61     38             59        69.5        47.5      62.5      48.5 #> 39 103 105     39             65        62.5         2.5      54.5       3.5 #> 40   9  14     40             60        77.5        94.5      68.5      94.5 #> 41  95 105     41             75        58.5         7.5      62.5       2.5 #> 42  67  76     42             75        45.5        34.5      57.5      34.5 #> 43  55  67     43             75        45.5        44.5      47.5      55.5 #> 44  56  67     44             75        53.5        50.5      45.5      44.5 #> 45   8  30     45             76        36.5        85.5      40.5      91.5 #> 46  14  29     46             75        98.5        88.5      87.5      91.5 #> 47  74  93     47             80        18.5        31.5      18.5      17.5 #> 48   7   8     48             70        25.5        97.5      38.5      97.5 #> 49  28  46     49             81        54.5        83.5      55.5      73.5 #> 50  37  40     50             80        22.5        77.5      14.5      81.5 #> 51  86 107     51             85        80.5         1.5      82.5      13.5 #> 52  93 106     52             85        31.5        13.5      34.5       1.5 #> 53  84  93     53             80         8.5        22.5      18.5      17.5 #> 54  30  55     54             85        37.5        65.5      45.5      57.5 #> 55  85  95     55             85        45.5        23.5      52.5      15.5 #> 56  14  31     56             85        97.5        85.5      87.5      91.5 #> 57  22  37     57             85        19.5        92.5      14.5      81.5 #> 58  60  73     58             88        98.5        49.5      98.5      39.5 #> 59  54  67     59             95        39.5        56.5      43.5      44.5 #> 60  76  85     60             95        46.5        25.5      56.5      32.5 #> 61  50  64     61            105        10.5        58.5      10.5      45.5 #> 62  28  30     62            107        37.5        84.5      48.5      85.5 #> 63 105 107     63            105        78.5         0.5      64.5       0.5 #> 64  32  41     64            100        13.5        74.5       2.5      80.5 #> 65  85  93     65            105        40.5        23.5      30.5      14.5 #> 66  30  46     66            100        36.5        71.5      54.5      72.5 #> 67  68  78     67            114        84.5        40.5      98.5      36.5 #> 68 103 106     68            115        35.5         1.5      54.5       3.5 #> 69  93  95     69            115        31.5        13.5      51.5      12.5 #> 70  60  68     70            130        86.5        44.5      96.5      51.5 #> 71  76  95     71            123        61.5        32.5      60.5      15.5 #> 72  68  73     72            129        98.5        39.5      87.5      43.5 #> 73  61  68     73            123        70.5        46.5      83.5      42.5 #> 74  48  50     74            135        12.5        59.5      22.5      60.5 #> 75  64  84     75            125         8.5        43.5       4.5      28.5 #> 76  95 106     76            125        35.5         1.5      51.5       9.5 #> 77  46  55     77            127        46.5        58.5      55.5      71.5 #> 78  46  56     78            132        55.5        71.5      56.5      56.5 #> 79  50  62     79            133        16.5        46.5      10.5      58.5 #> 80  76  80     80            144        75.5        28.5      61.5      32.5 #> 81  67  93     81            146        28.5        15.5      37.5      29.5 #> 82   9  46     82            140        63.5        92.5      56.5      73.5 #> 83  31  60     83            162        97.5        53.5      97.5      83.5 #> 84  61  76     84            200        62.5        36.5      69.5      47.5 #> 85  95 107     85            195        60.5        10.5      79.5       1.5 #> 86  80  95     86            208        76.5        27.5      60.5      15.5 #> 87  86  95     87            208        81.5        20.5      60.5      15.5 #> 88  61  80     88            210        76.5        35.5      70.5      46.5 #> 89  14  46     89            220        56.5        73.5      78.5      93.5 #> 90  14  60     90            290        97.5        53.5      84.5      89.5 #> 91  46  61     91            365        57.5        72.5      72.5      50.5 #> 92  14  68     92            358        81.5        91.5      83.5      42.5 #> 93  14  61     93            432        78.5        93.5      72.5      50.5 #>  #>   ## Find the mean patch area (see igraph manual for use of V() and E()) mean(igraph::V(tinyPatchMPG@mpg)$patchArea) #> [1] 21.67442  ## Quick visualization of the MPG if (interactive())   plot(tinyPatchMPG, col = c(\"grey\", \"black\"), legend = FALSE)  ## Additional graph extraction scenarios ## Produce a lattice MPG where focal points are spaced 10 cells apart tinyLatticeMPG <- MPG(cost = tinyCost, patch = 10) if (interactive())   plot(tinyLatticeMPG)"},{"path":"https://alexchubaty.com/grainscape/reference/corridor-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The corridor class — corridor-class","title":"The corridor class — corridor-class","text":"corridor class","code":""},{"path":"https://alexchubaty.com/grainscape/reference/corridor-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The corridor class — corridor-class","text":"voronoi RasterLayer representation boundaries voronoi polygons. linksSP SpatialLinesDataFrame representation links grains connectivity graph. nodesSP SpatialPoints representation nodes grains connectivity graph shortestLinksSP SpatialLines representation links shortest path coordinates shortestNodesSP SpatialPoints representation nodes shortest path coordinates corridorLength numeric length 1 giving length shortest path coordinates accumulated resistance units. See corridor() information.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/corridor-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The corridor class — corridor-class","text":"Alex Chubaty Paul Galpern","code":""},{"path":"https://alexchubaty.com/grainscape/reference/corridor.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","title":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","text":"Given series GOC models built different scales, visualize corridor (shortest path) two points using one tessellations (.e., scales) models.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/corridor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","text":"","code":"corridor(x, ...)  # S4 method for goc corridor(x, whichThresh, coords, weight = \"meanWeight\", ...)"},{"path":"https://alexchubaty.com/grainscape/reference/corridor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","text":"x goc object created GOC(). ... Additional arguments (used). whichThresh Integer giving index threshold visualize. coords two column matrix SpatialPoints() object giving coordinates end points corridor. weight GOC graph link weight use calculating distance. Please see details distance().","code":""},{"path":"https://alexchubaty.com/grainscape/reference/corridor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","text":"object class corridor.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/corridor.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","text":"Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011) Patch-based graphs landscape connectivity: guide construction, analysis, application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/corridor.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/corridor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize corridors between two points using a grains of connectivity (GOC) — corridor","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) ## Quick visualization of a corridor corridorStartEnd <- rbind(c(10, 10), c(90, 90)) tinyPatchCorridor <- corridor(tinyPatchGOC, whichThresh = 3, coords = corridorStartEnd) if (interactive())   plot(tinyPatchCorridor)  ## More control over a corridor visualization if (interactive()) {   plot(tinyPatchCorridor@voronoi, col = \"lightgrey\", lwd = 2)   plot(tinyPatchCorridor@linksSP, col = \"darkred\", lty = \"dashed\", add = TRUE)   plot(tinyPatchCorridor@nodesSP, col = \"darkred\", pch = 21, bg = \"white\", add = TRUE)   plot(tinyPatchCorridor@shortestLinksSP, col = \"darkred\", lty = \"solid\", lwd = 2, add = TRUE)   plot(tinyPatchCorridor@shortestNodesSP, col = \"darkred\", pch = 21, bg = \"darkred\", add = TRUE)   mtext(paste(\"Corridor shortest path length:\",               round(tinyPatchCorridor@corridorLength, 2),               \"resistance units\"), side = 1) }"},{"path":"https://alexchubaty.com/grainscape/reference/distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the grains of connectivity network distance — distance","title":"Find the grains of connectivity network distance — distance","text":"Find shortest network distance pairs points using GOC graph. can used effective distance landscape connectivity assessments.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the grains of connectivity network distance — distance","text":"","code":"distance(x, y, ...)  # S4 method for goc,SpatialPoints distance(x, y, weight = \"meanWeight\", ...)  # S4 method for goc,matrix distance(x, y, weight = \"meanWeight\", ...)  # S4 method for goc,numeric distance(x, y, weight = \"meanWeight\", ...)"},{"path":"https://alexchubaty.com/grainscape/reference/distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the grains of connectivity network distance — distance","text":"x goc object produced GOC(). y two column matrix SpatialPoints() object giving coordinates points interest. ... Additional arguments (used). weight GOC graph link weight use calculating distance. Please see Details explanation.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the grains of connectivity network distance — distance","text":"list object giving distance matrix threshold GOC object. Distance matrices give pairwise grains connectivity network distances sampling locations. Matrix indices correspond rows coordinates matrix (y).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/distance.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find the grains of connectivity network distance — distance","text":"Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011) Patch-based graphs landscape connectivity: guide construction, analysis, application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/distance.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the grains of connectivity network distance — distance","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the grains of connectivity network distance — distance","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) ## Three sets of coordinates in the study area loc <- cbind(c(30, 60, 90), c(30, 60, 90))  ## Find the GOC network distance matrices between these points ## for each of the 5 grains of connectivity tinyDist <- grainscape::distance(tinyPatchGOC, loc)"},{"path":"https://alexchubaty.com/grainscape/reference/export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export spatial data from MPG and GOC models — export","title":"Export spatial data from MPG and GOC models — export","text":"function automates export raster vector spatial data mpg grain objects. default places new directory, unless existing one specified overwrite = TRUE. can also used process mpg grain objects produce R spatial objects convenient plotting analysis within R. Use R = TRUE case parameters related file export ignored. (Default R = FALSE) raster::writeRaster() used rasters, sf::st_write() used export ESRI compatible shape files.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export spatial data from MPG and GOC models — export","text":"","code":"export(   x,   dirname = NULL,   path = \".\",   rasterFormat = \"GTiff\",   overwrite = FALSE,   R = FALSE,   vorBound = FALSE,   ... )  # S4 method for mpg export(   x,   dirname = NULL,   path = \".\",   rasterFormat = \"GTiff\",   overwrite = FALSE,   R = FALSE,   vorBound = FALSE,   ... )  # S4 method for grain export(   x,   dirname = NULL,   path = \".\",   rasterFormat = \"GTiff\",   overwrite = FALSE,   R = FALSE,   vorBound = FALSE,   ... )  # S4 method for goc export(   x,   dirname = NULL,   path = \".\",   rasterFormat = \"GTiff\",   overwrite = FALSE,   R = FALSE,   vorBound = FALSE,   ... )"},{"path":"https://alexchubaty.com/grainscape/reference/export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export spatial data from MPG and GOC models — export","text":"x mpg grain object dirname name new directory create. NULL directory name containing date time created. path path new directory dirname created. Defaults working directory. rasterFormat format exported rasters. See writeFormats() options. Defaults GeoTiff (rasterFormat='GTiff'). Use rasterFormat='raster' save .grd files native raster package format. overwrite directory already exists overwrite existing files inside. Defaults FALSE. R TRUE, return spatial objects written files. write files ignore dirname, path, rasterFormat, overwrite parameters. useful visualization using R plotting functions, spatial analysis within R. Defaults FALSE vorBound Specify whether create raster boundaries Voronoi polygons =1 remainder =NA. may useful visualizing relationships among polygons grain connectivity. can add time export large rasters. Defaults FALSE. ... Additional arguments (used).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export spatial data from MPG and GOC models — export","text":"Invisibly returns path folder created. Side effect exporting files representing raster vector spatial data object. Please note vector data export attribute name limited 8 characters shape files. See tables abbreviations used meaning. Exported mpg objects: nodes, linksCentroid, linksPerim shape files giving locations patch centroids, links among centroids, links among perimeters patches respectively. patchId, voronoi rasters giving patch identifier patch, patch Voronoi polygon refers . lcpPerimWeight, lcpLinkId give weight cost surface units shortest paths perimeters, identifiers links respectively. vorBound gives boundaries Voronoi polygons (specified). Description node (vertex) link (edge) weights mpg objects corresponding attribute names shape files created. Exported grain objects: nodes, linksCentroid shape files giving locations Voronoi polygon centroids links among respectively. voronoi rasters gives polygon identifier cluster patches. vorBound gives boundaries Voronoi polygons (specified). Description node (vertex) link (edge) weights grain objects  corresponding attribute names shape files created.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/export.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Export spatial data from MPG and GOC models — export","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/export.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export spatial data from MPG and GOC models — export","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) ## Export rasters and vectors and place in an R object sp_tinyPatchGOC <- export(grain(tinyPatchGOC, 2), R = TRUE)  # nolint sp_tinyPatchMPG <- export(tinyPatchMPG, R = TRUE) # nolint  ## Export raster and vectors to a specified directory exportPath <- tempdir() export(grain(tinyPatchGOC, 2), dirname = \"tiny_goc_thresh2\", path = exportPath) #> writing: substituting ENGCRS[\"Undefined Cartesian SRS with unknown unit\"] for missing CRS #> Writing layer `nodes' to data source  #>   `/tmp/RtmpKhJsMq/tiny_goc_thresh2' using driver `ESRI Shapefile' #> Writing 28 features with 5 fields and geometry type Point. #> writing: substituting ENGCRS[\"Undefined Cartesian SRS with unknown unit\"] for missing CRS #> Writing layer `linksCentroid' to data source  #>   `/tmp/RtmpKhJsMq/tiny_goc_thresh2' using driver `ESRI Shapefile' #> Writing 59 features with 15 fields and geometry type Line String. #> Exported to:/tmp/RtmpKhJsMq/tiny_goc_thresh2 export(tinyPatchMPG, dirname = \"tiny_mpg\", path = exportPath, vorBound = TRUE) #> Extracting voronoi boundaries... #> writing: substituting ENGCRS[\"Undefined Cartesian SRS with unknown unit\"] for missing CRS #> Writing layer `nodes' to data source  #>   `/tmp/RtmpKhJsMq/tiny_mpg' using driver `ESRI Shapefile' #> Writing 43 features with 4 fields and geometry type Point. #> writing: substituting ENGCRS[\"Undefined Cartesian SRS with unknown unit\"] for missing CRS #> Writing layer `linksCentroid' to data source  #>   `/tmp/RtmpKhJsMq/tiny_mpg' using driver `ESRI Shapefile' #> Writing 93 features with 12 fields and geometry type Line String. #> writing: substituting ENGCRS[\"Undefined Cartesian SRS with unknown unit\"] for missing CRS #> Writing layer `linksPerim' to data source  #>   `/tmp/RtmpKhJsMq/tiny_mpg' using driver `ESRI Shapefile' #> Writing 93 features with 8 fields and geometry type Line String. #> Exported to:/tmp/RtmpKhJsMq/tiny_mpg  ## clean up unlink(file.path(exportPath, \"tiny_goc_thresh2\"), recursive = TRUE) unlink(file.path(exportPath, \"tiny_mpg\"), recursive = TRUE)"},{"path":"https://alexchubaty.com/grainscape/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract or Replace Parts of an Object — $","title":"Extract or Replace Parts of an Object — $","text":"Extract Replace Parts Object","code":""},{"path":"https://alexchubaty.com/grainscape/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract or Replace Parts of an Object — $","text":"","code":"# S4 method for goc $(x, name)  # S4 method for goc $(x, name) <- value  # S4 method for mpg $(x, name)  # S4 method for mpg $(x, name) <- value"},{"path":"https://alexchubaty.com/grainscape/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract or Replace Parts of an Object — $","text":"x simList object extract element(s) replace element(s). name literal character string name(). value R object.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/gFinal.html","id":null,"dir":"Reference","previous_headings":"","what":".gFinal — .gFinal","title":".gFinal — .gFinal","text":".gFinal","code":""},{"path":"https://alexchubaty.com/grainscape/reference/gFinal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":".gFinal — .gFinal","text":"","code":".gFinal(g, print, theme)"},{"path":"https://alexchubaty.com/grainscape/reference/gFinal.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":".gFinal — .gFinal","text":"Paul Galpern","code":""},{"path":"https://alexchubaty.com/grainscape/reference/ggGS.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","title":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","text":"informal fortify-type method prepares either RasterLayer igraph objects contained slots within MPG grain objects easy plotting ggplot().","code":""},{"path":"https://alexchubaty.com/grainscape/reference/ggGS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","text":"","code":"ggGS(x, type = NULL, ...)  # S4 method for RasterLayer ggGS(x, type = NULL, ...)  # S4 method for list ggGS(x, type = NULL, ...)  # S4 method for mpg ggGS(x, type = NULL, ...)  # S4 method for grain ggGS(x, type = NULL, ...)  # S4 method for goc ggGS(x, type = NULL, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/ggGS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","text":"x mpg, grain, RasterLayer object. type mpg grain object supplied, gives name slot prepare plotting. Options discussed . required RasterLayer supplied. ... Additional arguments (used).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/ggGS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","text":"data.frame suitable plotting ggplot(). type raster data.frame following columns: value value raster cell x x coordinate centre raster cell y y coordinate centre raster cell type = 'nodes' data.frame following columns: x x coordinate node y y coordinate node ... attributes associated network nodes type = 'links' data.frame following columns: x1 x coordinate first node y1 y coordinate first node x2 x coordinate second node y2 y coordinate second node x1p x coordinate perimeter first node y1p y coordinate perimeter first node x2p x coordinate perimeter second node y2p y coordinate perimeter second node ... attributes associated network links","code":""},{"path":"https://alexchubaty.com/grainscape/reference/ggGS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","text":"Options type parameter RasterLayer supplied type optional. mpg type options \"node\" \"links\". prepares nodes links minimum planar graph network plotting,  Also \"patchId\", \"voronoi\", \"lcpPerimWeight\", \"lcpLinkId\", \"mpgPlot\" prepare rasters plotting. grain objects type  options \"nodes\" \"links\" prepare nodes links grains connectivity network  plotting. Also \"voronoi\" prepare grains connectivity Voronoi polygons raster plotting. either mpg grain objects type = \"vorBound\" identify boundaries Voronoi polygons plotting. potentially time consuming large rasters.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/ggGS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/ggGS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare data in MPG and grain objects for use with ggplot2 — ggGS","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) if (interactive()) {   library(ggplot2)    ## Plot the patches in a minimum planar graph   theme_set(theme_grainscape())   ggplot() +     geom_tile(data = ggGS(tinyPatchMPG, \"patchId\"),               aes(x = x, y = y, fill = value))    ## Plot the grain polygons in a grain of connectivity   ggplot() +     geom_tile(data = ggGS(grain(tinyPatchGOC, 3), \"voronoi\"),               aes(x = x, y = y, fill = value))    ## Plot the grain polygon boundaries   ggplot() +     geom_tile(data = ggGS(grain(tinyPatchGOC, 3), \"vorBound\"),               aes(x = x, y = y, fill = value))    ## Plot the patches and perimeter links of a minimum planar graph   ggplot() +     geom_tile(data = ggGS(tinyPatchMPG, \"patchId\"),               aes(x = x, y = y, fill = value)) +     geom_segment(data = ggGS(tinyPatchMPG, \"links\"),                  aes(x = x1p, y = y1p, xend = x2p, yend = y2p))    ## Plot the patches and linear representations of the perimeter links   ## of a minimum planar graph   ggplot() +     geom_tile(data = ggGS(tinyPatchMPG, \"patchId\"),               aes(x = x, y = y, fill = value)) +     geom_segment(data = ggGS(tinyPatchMPG, \"links\"),                  aes(x = x1p, y = y1p, xend = x2p, yend = y2p))    ## Plot the nodes and links of a grains of connectivity network   ## superimposed over the grain polygons   focalGrain <- grain(tinyPatchGOC, 3)   ggplot() +     geom_tile(data = ggGS(focalGrain, \"vorBound\"),               aes(x = x, y = y, fill = value)) +     geom_point(data = ggGS(focalGrain, \"nodes\"),                aes(x = x, y = y)) +     geom_segment(data = ggGS(focalGrain, \"links\"),                  aes(x = x1, y = y1, xend = x2, yend = y2)) }"},{"path":"https://alexchubaty.com/grainscape/reference/goc-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The goc class — goc-class","title":"The goc class — goc-class","text":"goc class","code":""},{"path":"https://alexchubaty.com/grainscape/reference/goc-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The goc class — goc-class","text":"voronoi RasterLayer describing regions proximity resistance units around focal patches points. summary summary grains connectivity generated properties. th list giving GOC graph threshold. element th contains goc object giving GOC graph class igraph(). Vertex attributes describes qualities polygon including coordinates polygon centroid, area polygons, original patch IDs MPG included polygon. areal measurements given raster cell counts. variety edge attributes also given GOC graph. See distance() information.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/goc-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The goc class — goc-class","text":"Alex Chubaty Paul Galpern","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The grain class — grain-class","title":"The grain class — grain-class","text":"grain class","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The grain class — grain-class","text":"voronoi RasterLayer describing regions proximity resistance units around focal patches points. summary summary grains connectivity generated properties. centroids SpatialPoints object indicating grain's polygon centroids. th list igraph objects giving graphs describing relationship among polygons grain See grain() information.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The grain class — grain-class","text":"Alex Chubaty Paul Galpern","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","title":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","text":"Extract grain (.e. scaled version Voronoi tessellation) GOC model.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","text":"","code":"grain(x, ...)  # S4 method for goc grain(x, whichThresh, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/grain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","text":"x goc object created GOC(). ... Additional arguments (used). whichThresh Integer giving grain threshold extract. index threshold extracted GOC().","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","text":"list object containing following elements: summary gives properties specified scale/grain whichThresh GOC model; voronoi RasterLayer giving Voronoi tessellation specified scale/grain whichThresh GOC model; centroids SpatialPoints objects giving centroids polygons Voronoi tessellation specified scale/grain whichThresh; th igraph object giving graph describing relationship among polygons specified scale/grain whichThresh","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","text":"Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011) Patch-based graphs landscape connectivity: guide construction, analysis, application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/grain.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grain.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract a grain of connectivity (GOC) tessellation at a given scale — grain","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) ## Very quick visualization at the finest scale/grain/threshold tinyPatchGOCgrain <- grain(tinyPatchGOC, whichThresh = 1) if (interactive())   plot(tinyPatchGOCgrain, col = topo.colors(10))  ## Visualize the model at the finest scale/grain/threshold ## Manual control of plotting if (interactive()) {   plot(grain(tinyPatchGOC, whichThresh = 1)@voronoi,        col = sample(rainbow(100)), legend = FALSE, main = \"Threshold 1\") }"},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"grainscape: Defunct — gsMPGstitch","title":"grainscape: Defunct — gsMPGstitch","text":"functions removed grainscape.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"grainscape: Defunct — gsMPGstitch","text":"","code":"gsMPGstitch(...)"},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"grainscape: Defunct — gsMPGstitch","text":"... arguments passed defunct functions.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — gsGOC","title":"Deprecated functions — gsGOC","text":"deprecated removed future release.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — gsGOC","text":"","code":"gsGOC(   mpg,   nThresh = NULL,   doThresh = NULL,   weight = \"lcpPerimWeight\",   sp = FALSE,   verbose = 3 )  gsGOCCorridor(GOC, whichThresh, coords, doPlot = FALSE, weight = \"meanWeight\")  gsGOCDistance(GOC, coords, weight = \"meanWeight\")  gsGOCPoint(GOC, coords)  gsGOCVisualize(GOC, whichThresh, sp = FALSE, doPlot = FALSE)  visualize(GOC, whichThresh, sp = FALSE, doPlot = FALSE)  gsGraphDataFrame(x)  gsMPG(cost, patch, sa = NULL, filterPatch = NULL, spreadFactor = 0)"},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — gsGOC","text":"mpg mpg object. nThresh Optional. integer giving number thresholds (scales) create GOC models. Thresholds selected produce maximum number unique grains (.e., models). nThresh thresholds also approximately evenly spread 0 threshold patches focal points landscape connected. simple way get representative subset possible GOC models. Provide either nThresh doThresh . doThresh Optional. vector giving link thresholds create GOC models. Use threshold() identify thresholds interest. Provide either nThresh doThresh . weight string giving link weight attribute use threshold. \"lcpPerimWeight\" uses accumulated resistance least-cost path distance perimeters patches link weight. sp Logical. TRUE sp package used create vector class SpatialPolygonsDataFrame() describing finest grain connectivity. verbose Set verbose=0 progress information console. GOC goc object. whichThresh Integer giving index threshold visualize. coords two column matrix SpatialPoints() object giving coordinates end points corridor. doPlot Logical. TRUE plots vector visualization corridor given scale x mpg object produced MPG(). lattice GOC MPG must run patch set integer value. cost RasterLayer giving landscape resistance surface, values raster cell proportional resistance movement, dispersal, gene flow organism landscape feature represent. Missing values NA acceptable (see ). Negative values . extract MPG Euclidean links (.e., least-cost path links) set cost[] <- 1. patch raster class RasterLayer patch-based analysis integer lattice analysis. raster given must extent, origin projection cost binary, without missing values, patches=1 non-patches=0. lattice analyses, integer gives spacing raster cells focal points lattice. filterPatch, sa, spreadFactor longer used.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-deprecated.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Deprecated functions — gsGOC","text":"sp argument also deprecated functions.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Test maps included with grainscape — grainscape-maps","title":"Test maps included with grainscape — grainscape-maps","text":"Intended users explore functionality package using simple artificial land cover maps. maps four five discrete land cover classes (integers 1 5) intended represent distinct land cover types. Typical analyses begin reclassifying reflect resistance movement.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-maps.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test maps included with grainscape — grainscape-maps","text":"raster","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-maps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Test maps included with grainscape — grainscape-maps","text":"patchy.asc caricatured map four land cover classes, patches large easy identify polygonal regions heuristic purposes. unrealistic map can used illustrate method understand works. map also serves similar heuristic purpose review graph-based connectivity methods (Galpern et al., 2011). (400 x 400 raster cells.) fragmented.asc simulated land cover map five land cover classes using algorithm produces fragmentation. (400 x 400 raster cells.) tiny.asc Similar fragmented.asc smaller extent lightning-fast computation experimental use. (100 x 100 raster cells.)","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Landscape Connectivity, Habitat, and Protected Area Networks — grainscape-package","title":"Landscape Connectivity, Habitat, and Protected Area Networks — grainscape-package","text":"Given landscape resistance surface, creates minimum planar graph grains connectivity models can used calculate effective distances landscape connectivity multiple scales.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Landscape Connectivity, Habitat, and Protected Area Networks — grainscape-package","text":"Landscape connectivity modelling understand movement dispersal organisms done using raster resistance surfaces landscape graph methods. Grains connectivity (GOC) models combine elements approaches produce continuous scalable tool can applied variety study systems. purpose package implement grains connectivity analyses. Routines accept raster-based resistance surfaces input return raster, vector graph-based data structures represent connectivity multiple scales. Effective distances describing connectivity geographic locations can determined multiple scales. Analyses sort can contribute corridor identification, landscape genetics, well connectivity assessments. Minimum planar graph (MPG; Fall et al., 2007) models resource patches landscapes can also generated using software. MPG calculations generalization Voronoi tessellation used GOC models based routines SELES software (Fall Fall, 2001). Routines also depend sp (Pebesma Bivand, 2005), raster (Hijmans van Etten, 2011), igraph (Csardi Nepusz, 2006) packages. paper describing use package landscape connectivity modelling available doi:10.1111/2041-210X.13350 . detailed tutorial available vignette (see browseVignettes('grainscape')).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Landscape Connectivity, Habitat, and Protected Area Networks — grainscape-package","text":"Csardi, G. T. Nepusz. (2006). igraph software package complex network research. InterJournal Complex Systems 1695. https://igraph.org. Fall, . J. Fall. (2001). domain-specific language models landscape dynamics. Ecological Modelling 141:1-18. Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011)  Patch-based graphs landscape connectivity: guide construction, analysis application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009. Hijmans, R.J. (2023). raster: Geographic Data Analysis Modeling. R package version 3.6-20, https://CRAN.R-project.org/package=raster. Pebesma, E.J. R.S. Bivand. (2005). Classes methods spatial data R. R News 5 (2), https://cran.r-project.org/doc/Rnews/.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/grainscape-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Landscape Connectivity, Habitat, and Protected Area Networks — grainscape-package","text":"Maintainer: Alex M Chubaty alex.chubaty@gmail.com (ORCID) Authors: Paul Galpern pgalpern@gmail.com (ORCID) [copyright holder] Sam Doctolero sam.doctolero@gmail.com","code":""},{"path":"https://alexchubaty.com/grainscape/reference/graphdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a data.frame containing the structure and associated attributes — graphdf","title":"Produce a data.frame containing the structure and associated attributes — graphdf","text":"Produce data.frame containing node (vertex) link (edge) structure well associated attributes . provides easy way create data tables describing graphs, particularly helpful users unfamiliar structure igraph objects.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/graphdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a data.frame containing the structure and associated attributes — graphdf","text":"","code":"graphdf(x, ...)  # S4 method for list graphdf(x, ...)  # S4 method for goc graphdf(x, ...)  # S4 method for grain graphdf(x, ...)  # S4 method for mpg graphdf(x, ...)  # S4 method for igraph graphdf(x, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/graphdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a data.frame containing the structure and associated attributes — graphdf","text":"x goc, mpg, igraph, list object. ... Additional arguments (used).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/graphdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a data.frame containing the structure and associated attributes — graphdf","text":"list object containing: v node (vertex) names associated attributes; e link (edge) lists associated attributes. Please see MPG() GOC() details attributes. GOC() objects typically contain multiple thresholds, enumerated list length number thresholds returned containing v e elements.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/graphdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Produce a data.frame containing the structure and associated attributes — graphdf","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/graphdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a data.frame containing the structure and associated attributes — graphdf","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) ## Create a data.frame with the structure and attributes of a MPG object tinyPatchMPG_df <- graphdf(tinyPatchMPG) # nolint  ## Create a data.frame with the structure and attributes of a GOC object tinyPatchGOC_df <- graphdf(tinyPatchGOC) # nolint  ## Create a data.frame with the structure and attributes of any igraph object graphdf(tinyPatchGOC@th[[1]]$goc) #> [[1]] #> [[1]]$v #>    name polygonId centroidX centroidY polygonArea totalPatchArea #> 1    25        25 21.164804 45.946927         179             14 #> 2    11        11 35.528302 76.175472         530            100 #> 3     2         2 24.097561 94.603659         164             30 #> 4     1         1  7.790323 93.129032         186             38 #> 5    33        33 76.029644 30.851779         253             21 #> 6    29        29 97.166667 41.371795          39              1 #> 7    10        10 96.060000 88.340000          25              2 #> 8     7         7 96.933333 94.683333          60              9 #> 9    27        27 39.861345 38.697479         476             76 #> 10   16        16 14.952381 70.563492         252             72 #> 11   15        15 22.877358 79.537736          53              7 #> 12   14        14 12.304688 81.367188         128             11 #> 13    3         3 42.166667 94.927083         192             46 #> 14    4         4 64.107143 90.910714         336             61 #> 15    5         5 72.312500 98.250000          16              1 #> 16   18        18 26.395522 57.385572         201             32 #> 17   38        38 56.521176 13.867059         425             31 #> 18   13        13  3.009804 80.705882         102              4 #> 19   30        30 18.108000 33.252000         250             32 #> 20   21        21 47.242424 58.886364         132              4 #> 21   28        28 83.831361 48.272189         338              4 #> 22    6         6 82.088123 85.595785         522             65 #> 23   20        20 37.360656 54.877049         122              5 #> 24   26        26  6.444134 43.768156         179              4 #> 25   36        36 85.342205 19.600760         526             55 #> 26   39        39 91.982587  6.067164         201             26 #> 27   22        22 60.739336 53.007109         422             39 #> 28   40        40 51.824675  3.058442          77              1 #> 29    9         9 52.510638 84.574468         188             14 #> 30   37        37 22.657810 12.435588         621             42 #> 31   34        34  5.820000 19.433333         375             18 #> 32   35        35 42.981481 23.084362         243             12 #> 33    8         8 19.357143 91.325397          63              7 #> 34   23        23 92.944795 58.755521         317              6 #> 35   31        31 60.324561 33.085965         285             15 #> 36   19        19  8.658451 58.595070         284              9 #> 37   41        41 64.756757  3.216216          74              2 #> 38   24        24 73.349741 51.795337         193              4 #> 39   17        17 60.669856 71.672249         418              2 #> 40   12        12 93.478070 77.478070         228              4 #> 41   32        32 96.159091 33.090909          88              2 #> 42   43        43 76.169643  4.223214         112              2 #> 43   42        42 36.820000  3.692000         125              2 #>    totalPatchEdgeArea totalCoreArea patchId #> 1                  14             0      62 #> 2                  95             5      30 #> 3                  28             2       7 #> 4                  37             1       5 #> 5                  21             0      80 #> 6                   1             0      73 #> 7                   2             0      29 #> 8                   9             0      19 #> 9                  72             4      67 #> 10                 67             5      41 #> 11                  7             0      40 #> 12                 11             0      37 #> 13                 45             1       8 #> 14                 58             3       9 #> 15                  1             0      12 #> 16                 32             0      48 #> 17                 31             0      95 #> 18                  4             0      32 #> 19                 32             0      74 #> 20                  4             0      55 #> 21                  4             0      68 #> 22                 64             1      14 #> 23                  5             0      54 #> 24                  4             0      64 #> 25                 55             0      86 #> 26                 26             0     100 #> 27                 39             0      56 #> 28                  1             0     103 #> 29                 14             0      28 #> 30                 39             3      93 #> 31                 18             0      84 #> 32                 12             0      85 #> 33                  7             0      22 #> 34                  6             0      60 #> 35                 15             0      76 #> 36                  9             0      50 #> 37                  2             0     105 #> 38                  4             0      61 #> 39                  2             0      46 #> 40                  4             0      31 #> 41                  2             0      78 #> 42                  2             0     107 #> 43                  2             0     106 #>  #> [[1]]$e #>    e1 e2 maxWeight linkIdMaxWeight minWeight linkIdMinWeight medianWeight #> 1  25 30        12               1        12               1           12 #> 2  11 16        12               2        12               2           12 #> 3  11 15        10               3        10               3           10 #> 4   2  8        10               4        10               4           10 #> 5   2  1         5               5         5               5            5 #> 6  33 36        10               6        10               6           10 #> 7  29 32        15               7        15               7           15 #> 8  10 12        10               8        10               8           10 #> 9  10  7        10               9        10               9           10 #> 10 27 35        20              10        20              10           20 #> 11 16 18        20              11        20              11           20 #> 12 16 15        20              12        20              12           20 #> 13 16 14        20              13        20              13           20 #> 14  3  9        25              14        25              14           25 #> 15  4  5        20              15        20              15           20 #> 16  5  6        30              16        30              16           30 #> 17 11 18        40              17        40              17           40 #> 18  3  4        32              18        32              18           32 #> 19 18 20        35              19        35              19           35 #> 20 38 40        40              20        40              20           40 #> 21 25 26        44              21        44              21           44 #> 22  1  8        40              22        40              22           40 #> 23 14 13        50              23        50              23           50 #> 24 30 34        40              24        40              24           40 #> 25 21 22        45              25        45              25           45 #> 26  1 13        45              26        45              26           45 #> 27  4  9        40              27        40              27           40 #> 28 33 28        45              28        45              28           45 #> 29  7  6        45              29        45              29           45 #> 30 11 20        50              30        50              30           50 #> 31  1 14        45              31        45              31           45 #> 32 21 20        50              32        50              32           50 #> 33 30 26        52              33        52              33           52 #> 34 36 39        55              34        55              34           55 #> 35 39 43        54              35        54              35           54 #> 36 16 19        55              36        55              36           55 #> 37 22 31        64              37        64              37           64 #> 38 22 24        59              38        59              38           59 #> 39 40 41        65              39        65              39           65 #> 40  4  6        60              40        60              40           60 #> 41 38 41        75              41        75              41           75 #> 42 27 31        75              42        75              42           75 #> 43 27 21        75              43        75              43           75 #> 44 27 22        75              44        75              44           75 #> 45 11  3        76              45        76              45           76 #> 46 10  6        75              46        75              46           75 #> 47 30 37        80              47        80              47           80 #> 48  2  3        70              48        70              48           70 #> 49  9 17        81              49        81              49           81 #> 50 15 14        80              50        80              50           80 #> 51 36 43        85              51        85              51           85 #> 52 37 42        85              52        85              52           85 #> 53 37 34        80              53        80              53           80 #> 54 11 21        85              54        85              54           85 #> 55 38 35        85              55        85              55           85 #> 56  6 12        85              56        85              56           85 #> 57 14  8        85              57        85              57           85 #> 58 29 23        88              58        88              58           88 #> 59 27 20        95              59        95              59           95 #> 60 35 31        95              60        95              60           95 #> 61 26 19       105              61       105              61          105 #> 62 11  9       107              62       107              62          107 #> 63 41 43       105              63       105              63          105 #> 64 16 13       100              64       100              64          100 #> 65 37 35       105              65       105              65          105 #> 66 11 17       100              66       100              66          100 #> 67 28 32       114              67       114              67          114 #> 68 40 42       115              68       115              68          115 #> 69 38 37       115              69       115              69          115 #> 70 28 23       130              70       130              70          130 #> 71 38 31       123              71       123              71          123 #> 72 29 28       129              72       129              72          129 #> 73 28 24       123              73       123              73          123 #> 74 18 19       135              74       135              74          135 #> 75 26 34       125              75       125              75          125 #> 76 38 42       125              76       125              76          125 #> 77 21 17       127              77       127              77          127 #> 78 22 17       132              78       132              78          132 #> 79 25 19       133              79       133              79          133 #> 80 33 31       144              80       144              80          144 #> 81 27 37       146              81       146              81          146 #> 82  4 17       140              82       140              82          140 #> 83 23 12       162              83       162              83          162 #> 84 31 24       200              84       200              84          200 #> 85 38 43       195              85       195              85          195 #> 86 33 38       208              86       208              86          208 #> 87 38 36       208              87       208              87          208 #> 88 33 24       210              88       210              88          210 #> 89  6 17       220              89       220              89          220 #> 90  6 23       290              90       290              90          290 #> 91 24 17       365              91       365              91          365 #> 92 28  6       358              92       358              92          358 #> 93  6 24       432              93       432              93          432 #>    meanWeight numEdgesWeight linkIdAll eucCentroidWeight #> 1          12              1         1         13.057765 #> 2          12              1         2         21.327514 #> 3          10              1         3         13.090118 #> 4          10              1         4          5.763555 #> 5           5              1         5         16.373776 #> 6          10              1         6         14.605109 #> 7          15              1         7          8.341959 #> 8          10              1         8         11.164582 #> 9          10              1         9          6.403170 #> 10         20              1        10         15.921830 #> 11         20              1        11         17.452881 #> 12         20              1        12         11.972565 #> 13         20              1        13         11.123404 #> 14         25              1        14         14.634698 #> 15         20              1        15         11.008769 #> 16         30              1        16         15.990370 #> 17         40              1        17         20.891816 #> 18         32              1        18         22.305060 #> 19         35              1        19         11.248415 #> 20         40              1        20         11.784877 #> 21         44              1        21         14.881034 #> 22         40              1        22         11.706598 #> 23         50              1        23          9.318379 #> 24         40              1        24         18.491903 #> 25         45              1        25         14.721830 #> 26         45              1        26         13.311199 #> 27         40              1        27         13.214648 #> 28         45              1        28         19.087627 #> 29         45              1        29         17.405856 #> 30         50              1        30         21.377098 #> 31         45              1        31         12.598432 #> 32         50              1        32         10.664143 #> 33         52              1        33         15.704627 #> 34         55              1        34         15.074910 #> 35         54              1        35         15.920093 #> 36         55              1        36         13.522451 #> 37         64              1        37         19.925462 #> 38         59              1        38         12.668492 #> 39         65              1        39         12.933044 #> 40         60              1        40         18.750043 #> 41         75              1        41         13.463478 #> 42         75              1        42         21.218679 #> 43         75              1        43         21.495846 #> 44         75              1        44         25.311184 #> 45         76              1        45         19.891979 #> 46         75              1        46         14.238823 #> 47         80              1        47         21.307834 #> 48         70              1        48         18.072000 #> 49         81              1        49         15.265651 #> 50         80              1        50         10.729784 #> 51         85              1        51         17.905441 #> 52         85              1        52         16.643856 #> 53         80              1        53         18.234042 #> 54         85              1        54         20.883820 #> 55         85              1        55         16.379317 #> 56         85              1        56         13.986715 #> 57         85              1        57         12.202584 #> 58         88              1        58         17.889050 #> 59         95              1        59         16.371681 #> 60         95              1        60         20.020352 #> 61        105              1        61         14.991350 #> 62        107              1        62         18.945788 #> 63        105              1        63         11.457225 #> 64        100              1        64         15.668223 #> 65        105              1        65         22.944455 #> 66        100              1        66         25.541668 #> 67        114              1        67         19.556181 #> 68        115              1        68         15.018045 #> 69        115              1        69         33.893609 #> 70        130              1        70         13.890821 #> 71        123              1        71         19.591633 #> 72        129              1        72         15.014853 #> 73        123              1        73         11.057890 #> 74        135              1        74         17.778262 #> 75        125              1        75         24.342826 #> 76        125              1        76         22.173592 #> 77        127              1        77         18.541165 #> 78        132              1        78         18.665269 #> 79        133              1        79         17.787198 #> 80        144              1        80         15.863203 #> 81        146              1        81         31.395040 #> 82        140              1        82         19.543119 #> 83        162              1        83         18.730143 #> 84        200              1        84         22.796840 #> 85        195              1        85         21.887576 #> 86        208              1        86         25.866214 #> 87        208              1        87         29.385831 #> 88        210              1        88         21.114320 #> 89        220              1        89         25.546174 #> 90        290              1        90         28.952844 #> 91        365              1        91         23.576919 #> 92        358              1        92         37.364284 #> 93        432              1        93         34.911741 #>  #>"},{"path":"https://alexchubaty.com/grainscape/reference/habConnEngine.html","id":null,"dir":"Reference","previous_headings":"","what":"Habitat connectivity engine — .habConnEngine","title":"Habitat connectivity engine — .habConnEngine","text":"Internal function. Serves wrapper around habitat connectivity engine developed C++.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/habConnEngine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Habitat connectivity engine — .habConnEngine","text":"","code":".habConnEngine(cost, patches)"},{"path":"https://alexchubaty.com/grainscape/reference/habConnEngine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Habitat connectivity engine — .habConnEngine","text":"cost Numeric raster cost (resistance) map. patches Logical raster indicating presence habitat patches.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/habConnEngine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Habitat connectivity engine — .habConnEngine","text":"object class hce.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/habConnEngine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Habitat connectivity engine — .habConnEngine","text":"Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/habConnRcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Habitat connectivity engine (C++) — .habConnRcpp","title":"Habitat connectivity engine (C++) — .habConnRcpp","text":"Internal function, intended called directly. DESCRIPTION NEEDED.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/habConnRcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Habitat connectivity engine (C++) — .habConnRcpp","text":"","code":".habConnRcpp(cost, patches, ncol, nrow)"},{"path":"https://alexchubaty.com/grainscape/reference/habConnRcpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Habitat connectivity engine (C++) — .habConnRcpp","text":"cost Numeric vector habitat cost (resistance) values extracted raster cost map. patches Numeric vector binary values (0 1) ones corresponds patch cells zeroes non-habitat (.e., matrix) cells. ncol Number columns raster cost/patch map. nrow Number rows raster cost/patch map.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/habConnRcpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Habitat connectivity engine (C++) — .habConnRcpp","text":"Sam Doctolero","code":""},{"path":"https://alexchubaty.com/grainscape/reference/hce-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The hce class — hce-class","title":"The hce class — hce-class","text":"Used internally.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/hce-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The hce class — hce-class","text":"voronoi Voronoi tessellation patches resistance surface (RasterLayer). patchLinks RasterLayer whose values indicate patch ids (positive integers) link ids (negative integers). linkData data.frame link attributes.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/hce-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The hce class — hce-class","text":"Alex Chubaty Sam Doctolero","code":""},{"path":"https://alexchubaty.com/grainscape/reference/mpg-class.html","id":null,"dir":"Reference","previous_headings":"","what":"The mpg class — mpg-class","title":"The mpg class — mpg-class","text":"mpg class","code":""},{"path":"https://alexchubaty.com/grainscape/reference/mpg-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"The mpg class — mpg-class","text":"mpg minimum planar graph class igraph. patchId input patch raster patch cells assigned id (RasterLayer). voronoi Voronoi tessellation patches resistance surface (RasterLayer). lcpPerimWeight paths links patches accumulated costs (RasterLayer). lcpLinkId paths links patches id (RasterLayer). mpgPlot RasterLayer version mpg, can easily plotted visualize MPG. mpg slot contains useful vertex edge attributes. Vertex attributes give attributes patches including patch area, area patch edges, core area patch, coordinates patch centroid. areal measurements given raster cell counts. Edge attributes give attributes graph links including link weights giving accumulated resistance/least-cost path distance, Euclidean distance, start end coordinates link.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/mpg-class.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The mpg class — mpg-class","text":"Alex Chubaty Paul Galpern","code":""},{"path":"https://alexchubaty.com/grainscape/reference/patchFilter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter out patches smaller than a specified area — patchFilter","title":"Filter out patches smaller than a specified area — patchFilter","text":"Pre-process patch rasters prior use MPG().","code":""},{"path":"https://alexchubaty.com/grainscape/reference/patchFilter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter out patches smaller than a specified area — patchFilter","text":"","code":"patchFilter(x, cells = NULL, area = NULL, ...)  # S4 method for RasterLayer patchFilter(x, cells = NULL, area = NULL, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/patchFilter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter out patches smaller than a specified area — patchFilter","text":"x binary raster (.e. consisting 0, 1, NA cells), cells =1 represent patches cells minimum number cells constitute patch. Default NULL. one cells area may specified. area minimum area constitutes patch (area calculated coordinate reference system raster multiplying count cells patch x y resolution raster cell). Default NULL. one cells area may specified. ... Additional arguments passed clump() function raster package. example directions = 4 may used conservative cells constitute patch.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/patchFilter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter out patches smaller than a specified area — patchFilter","text":"binary raster patches (.e. clumped areas =1) greater specified area.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/patchFilter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter out patches smaller than a specified area — patchFilter","text":"examines binary raster identify patches clumps cells values =1, determines area, returns binary raster patches area greater equal specified amount represented. helpful analyzing habitat connectivity models patches represent land cover habitat type. example, raster may patches certain habitat type insufficient area support ecological process interest. Another use case remote sensing classification errors introduced artifacts. Filtering can help cases.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/patchFilter.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Filter out patches smaller than a specified area — patchFilter","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/patchFilter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter out patches smaller than a specified area — patchFilter","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features = 10 ## and all patches are greater than or equal to 2 cells in size filteredPatch <- patchFilter(tinyCost == 10, cells = 2) tinyPatchMPG <- MPG(cost = tinyCost, patch = filteredPatch) if (interactive()) plot(tinyPatchMPG)  ## Compare to removal of patches greater than or equal to 40 cells in size! filteredPatch <- patchFilter(tinyCost == 10, cells = 40) tinyPatchMPG <- MPG(cost = tinyCost, patch = filteredPatch) if (interactive()) plot(tinyPatchMPG)  ## Use a rook/castle 4-direction case rather than the queen 8-direction case ## to identify neighbouring cells in a patch filteredPatch <- patchFilter(tinyCost == 10, cells = 40, directions = 4) tinyPatchMPG <- MPG(cost = tinyCost, patch = filteredPatch) if (interactive()) plot(tinyPatchMPG)"},{"path":"https://alexchubaty.com/grainscape/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","title":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","text":"Plot quick visualizations mpg, grain, corridor objects. function intended get quick look state grainscape object rendering likely universally useful visualizations spatial data within objects. Much control available using ggGS() ggplot() enabling layering different different analytical products, visualization node link attributes. high-resolution visualization greatest level control use export() export spatial objects cartographic representation geographic information system (GIS).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","text":"","code":"# S4 method for corridor,ANY plot(x, y, quick = NULL, print = TRUE, theme = TRUE, ...)  # S4 method for grain,ANY plot(x, y, quick = NULL, print = TRUE, theme = TRUE, ...)  # S4 method for mpg,ANY plot(x, y, quick = NULL, print = TRUE, theme = TRUE, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","text":"x grainscape object (corridor, grain, mpg). y Ignored. quick NULL (default) plot useful quick visualization supplied object type. See description available quick plots, defaults. print Render ggplot default graphics device. Default TRUE. theme Apply grainscape theme scale aesthetics. Default TRUE. ... Additional arguments (used).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","text":"","code":"Invisibly, a `ggplot2` object to which additional `ggplot`            geoms and adjustments can be applied. Has the side effect of            rendering the plot, unless `print = FALSE`."},{"path":"https://alexchubaty.com/grainscape/reference/plot.html","id":"types-of-visualization-available-with-the-quick-parameter","dir":"Reference","previous_headings":"","what":"Types of visualization available with the quick parameter","title":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","text":"\"mpgPerimPlot\" gives vector rendering minimum planar graph vector links connecting perimeters patches. accurately represent sinuosity paths links patches offers good approximation renders better large extents. Default mpg objects. available objects. \"mpgPlot\" gives raster-rendering minimum planar graph patchId positive integers, linkId negative integers showing shortest paths patches  available mpg objects. \"network\" gives vector rendering minimum planar graph grains connectivity network nodes links plotted patch polygon centroid locations. Available mpg grain objects. Default grain objects. \"grainPlot\" gives raster vector rendering grains connectivity network nodes links plotted polygon centroid locations, superimposed boundaries Voronoi polygons. Can time consuming large rasters due Voronoi boundary extraction. available grain objects. \"corridorPlot\" renders output corridor() analysis. option available corridor objects default.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/plot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","text":"Alex Chubaty Paul Galpern","code":""},{"path":"https://alexchubaty.com/grainscape/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot quick visualizations of grainscape objects — plot,corridor,ANY-method","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) if (interactive()) {   library(ggplot2)    ## MPG and showing simplified links among the perimeters of patches   plot(tinyPatchMPG)    ## MPG showing links among the nodes of connected patches   plot(tinyPatchMPG, quick = \"network\")    ## MPG showing the shortest paths between patches actually used to   ## to calculate link weight values   plot(tinyPatchMPG, quick = \"mpgPlot\")    ## A grain of connectivity network plot with Voronoi boundaries   plot(grain(tinyPatchGOC, 3), quick = \"grainPlot\")    ## Capture plot output for further processing with ggplot   g <- plot(tinyPatchMPG, print = FALSE, theme = FALSE)   g <- g + theme_minimal() + ggtitle(\"Minimum planar graph\") +     theme(plot.title = element_text(size = 20, hjust = 0.5)) +     theme(legend.position = \"none\") +     xlab(\"Easting\") + ylab(\"Northing\")   g    ## To change aesthetics it is best to build the plot from scratch   ## using grainscape::ggGS(). See examples therein. }"},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"Identify polygon containing location multiple scales.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"","code":"point(x, ...)  # S4 method for goc point(x, coords, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"x goc object produced GOC(). ... Additional arguments (used). coords two column matrix SpatialPoints() object giving coordinates points interest.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"list elements: pointPolygon matrix elements giving id polygon goc, rows give points interest columns give thresholds; pointTotalPatchArea matrix elements giving area patches polygon (cell counts), rows give points columns give thresholds; pointTotalCoreArea core area patches; pointECS gives patch area (cell counts) averaged points interest (defined O'Brien et al., 2006); pointECSCore core area patches.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"See MPG() warning related areal measurements.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011) Patch-based graphs landscape connectivity: guide construction, analysis, application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009. O'Brien, D., M. Manseau, . Fall, M.-J. Fortin. (2006) Testing importance spatial configuration winter habitat woodland caribou: application graph theory. Biological Conservation 130:70-83.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/point.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify the polygons containing locations in grains of connectivity (GOC) tessellations — point","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Extract a representative subset of 5 grains of connectivity tinyPatchGOC <- GOC(tinyPatchMPG, nThresh = 5) ## Three sets of coordinates in the study area loc <- cbind(c(30, 60, 90), c(30, 60, 90))  ## Find the GOC polygon containing these three locations ## for each of the 5 grains of connectivity tinyPts <- point(tinyPatchGOC, loc)"},{"path":"https://alexchubaty.com/grainscape/reference/show.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a grainscape object — show,goc-method","title":"Show a grainscape object — show,goc-method","text":"Custom show method safely print contents goc grain object.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/show.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a grainscape object — show,goc-method","text":"","code":"# S4 method for goc show(object)  # S4 method for grain show(object)  # S4 method for corridor show(object)"},{"path":"https://alexchubaty.com/grainscape/reference/show.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a grainscape object — show,goc-method","text":"object goc() grain() object.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/theme_grainscape.html","id":null,"dir":"Reference","previous_headings":"","what":"A ggplot2 theme for grainscape — theme_grainscape","title":"A ggplot2 theme for grainscape — theme_grainscape","text":"ggplot2() theme designed grainscape based ggthemes::theme_map() theme, several modifications.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/theme_grainscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A ggplot2 theme for grainscape — theme_grainscape","text":"","code":"theme_grainscape(base_size = 9, base_family = \"\")"},{"path":"https://alexchubaty.com/grainscape/reference/theme_grainscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A ggplot2 theme for grainscape — theme_grainscape","text":"base_size Base font size base_family Base font family","code":""},{"path":"https://alexchubaty.com/grainscape/reference/theme_grainscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A ggplot2 theme for grainscape — theme_grainscape","text":"theme suitable use ggplot()","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/theme_grainscape.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A ggplot2 theme for grainscape — theme_grainscape","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/theme_grainscape.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A ggplot2 theme for grainscape — theme_grainscape","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) if (interactive()) {   library(ggplot2)    ## Plot the patches in a minimum planar graph   theme_set(theme_grainscape())   plot(tinyPatchMPG, quick = \"mpgPlot\") }"},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":null,"dir":"Reference","previous_headings":"","what":"Produce a minimum planar graph (MPG) at multiple scales — threshold","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"Perform scalar analysis minimum planar graph (MPG) building graph series link thresholds. threshold value increases nodes graph become connected, forming increasingly fewer components, graph becomes connected (e.g., Brooks, 2003). N.B. Grains connectivity (GOC) done GOC() also scalar analysis using Voronoi tessellations rather patches (see Galpern et al., 2012).","code":""},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"","code":"threshold(x, ...)  # S4 method for mpg threshold(x, weight = \"lcpPerimWeight\", nThresh = NULL, doThresh = NULL, ...)"},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"x mpg object produced MPG(). ... Additional arguments (used). weight string giving link weight attribute use threshold. \"lcpPerimWeight\" uses accumulated resistance least-cost path distance perimeters patches link weight. nThresh Optional. integer giving number thresholds (scales) create GOC models. Thresholds selected produce maximum number unique grains (.e., models). nThresh thresholds also approximately evenly spread 0 threshold patches focal points landscape connected. simple way get representative subset possible GOC models. Provide either nThresh doThresh . doThresh Optional. vector giving link thresholds create GOC models. Use threshold() identify thresholds interest. Provide either nThresh doThresh .","code":""},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"list object following elements: summary summarizes thresholded graphs generated properties; th list length nThresh length(doThresh) giving thresholded graph (class igraph) threshold.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"See MPG() warning related areal measurements.","code":""},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"Brooks, C.P. (2003) scalar analysis landscape connectivity. Oikos 102:433-439. Fall, ., M.-J. Fortin, M. Manseau, D. O'Brien. (2007) Spatial graphs: Principles applications habitat connectivity. Ecosystems 10:448:461. Galpern, P., M. Manseau. (2013a) Finding functional grain: comparing methods scaling resistance surfaces. Landscape Ecology 28:1269-1291. Galpern, P., M. Manseau. (2013b) Modelling influence landscape connectivity animal distribution: functional grain approach. Ecography 36:1004-1016. Galpern, P., M. Manseau, . Fall. (2011) Patch-based graphs landscape connectivity: guide construction, analysis, application conservation. Biological Conservation 144:44-55. Galpern, P., M. Manseau, P.J. Wilson. (2012) Grains connectivity: analysis multiple spatial scales landscape genetics. Molecular Ecology 21:3996-4009.","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"Paul Galpern Alex Chubaty","code":""},{"path":"https://alexchubaty.com/grainscape/reference/threshold.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Produce a minimum planar graph (MPG) at multiple scales — threshold","text":"","code":"## Load raster landscape tiny <- raster::raster(system.file(\"extdata/tiny.asc\", package = \"grainscape\"))  ## Create a resistance surface from a raster using an is-becomes reclassification tinyCost <- raster::reclassify(tiny, rcl = cbind(c(1, 2, 3, 4), c(1, 5, 10, 12))) ## Produce a patch-based MPG where patches are resistance features=1 tinyPatchMPG <- MPG(cost = tinyCost, patch = tinyCost == 1) ## Threshold this graph at a representative subset of 10 thresholds tinyThresh <- threshold(tinyPatchMPG, nThresh = 10)  ## Examine the properties of one of these threshold graphs print(tinyThresh$th[[7]], vertex = TRUE, edge = TRUE) #> IGRAPH 49f638e UN-- 43 89 --  #> + attr: name (v/c), patchId (v/n), patchArea (v/n), patchEdgeArea #> | (v/n), coreArea (v/n), centroidX (v/n), centroidY (v/n), linkId #> | (e/n), lcpPerimWeight (e/n), startPerimX (e/n), startPerimY (e/n), #> | endPerimX (e/n), endPerimY (e/n) #> + edges from 49f638e (vertex names): #>  [1] 62 --74  30 --41  30 --40  7  --22  5  --7   80 --86  73 --78  29 --31  #>  [9] 19 --29  67 --85  41 --48  40 --41  37 --41  8  --28  9  --12  12 --14  #> [17] 30 --48  8  --9   48 --54  95 --103 62 --64  5  --22  32 --37  74 --84  #> [25] 55 --56  5  --32  9  --28  68 --80  14 --19  30 --54  5  --37  54 --55  #> [33] 64 --74  86 --100 100--107 41 --50  56 --76  56 --61  103--105 9  --14  #> + ... omitted several edges"},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"version-044","dir":"Changelog","previous_headings":"","what":"version 0.4.4","title":"version 0.4.4","text":"CRAN release: 2023-04-20","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"dependency-changes-0-4-4","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"version 0.4.4","text":"Removed retiring spatial packages rgdal rgeos (#68) Use sf writing shapefiles.","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"bugfixes-0-4-4","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"version 0.4.4","text":"Improved plotting lattice MPGs (#51) Removed unused eucPerimWeight documentation (#56) Improved error messaging undefined thresholds GOC() (#57)","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"new-features--enhancements-0-4-4","dir":"Changelog","previous_headings":"","what":"New features & enhancements","title":"version 0.4.4","text":"None","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"version-043","dir":"Changelog","previous_headings":"","what":"version 0.4.3","title":"version 0.4.3","text":"CRAN release: 2020-09-01","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"dependency-changes-0-4-3","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"version 0.4.3","text":"none","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"bugfixes-0-4-3","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"version 0.4.3","text":"none","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"new-features--enhancements-0-4-3","dir":"Changelog","previous_headings":"","what":"New features & enhancements","title":"version 0.4.3","text":"added MEE paper citation updated package DESCRIPTION & README.","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"version-042","dir":"Changelog","previous_headings":"","what":"version 0.4.2","title":"version 0.4.2","text":"CRAN release: 2019-12-06","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"dependency-changes-0-4-2","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"version 0.4.2","text":"removed unused dependency hunspell Suggests","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"bugfixes-0-4-2","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"version 0.4.2","text":"reduced package tarball size","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"new-features--enhancements-0-4-2","dir":"Changelog","previous_headings":"","what":"New features & enhancements","title":"version 0.4.2","text":"none","code":""},{"path":[]},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"dependency-changes-0-4-1","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"version 0.4.1","text":"none","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"bugfixes-0-4-1","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"version 0.4.1","text":"fix error R-devel exposed change matrix class fixed error theme_grainscape() example","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"new-features--enhancements-0-4-1","dir":"Changelog","previous_headings":"","what":"New features & enhancements","title":"version 0.4.1","text":"added package hexsticker","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"version-040","dir":"Changelog","previous_headings":"","what":"version 0.4.0","title":"version 0.4.0","text":"CRAN release: 2019-08-09","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"dependency-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Dependency changes","title":"version 0.4.0","text":"Requires R >= 3.5 remove rgeos dependency deprecate use sp argument many functions (#38)","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"bugfixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"version 0.4.0","text":"numerous bug fixes","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"new-features--enhancements-0-4-0","dir":"Changelog","previous_headings":"","what":"New features & enhancements","title":"version 0.4.0","text":"reimplement algorithm calculate minimum planar graph using C++; longer relies SELES binary now cross-platform. use updated igraph functions internally updated vignette / tutorial (#5) renamed functions remove gs gsGOC prefixes; old names deprecated removed future release (#10) MPG() can now handle large rasters use S4 classes methods (#3, #19) improved plotting using ggplot2 default (#22, #47) new functions export() (#39) patchFilter() (#40) fix typos (#58, @jsta)","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"removed-features-0-4-0","dir":"Changelog","previous_headings":"","what":"Removed features","title":"version 0.4.0","text":"removed gsMPGstitch() unreliable","code":""},{"path":"https://alexchubaty.com/grainscape/news/index.html","id":"version-030","dir":"Changelog","previous_headings":"","what":"version 0.3.0","title":"version 0.3.0","text":"original version R-forge (http://grainscape.r-forge.r-project.org/) uses SELES binary calculate minimum planar graph (Windows )","code":""}]
